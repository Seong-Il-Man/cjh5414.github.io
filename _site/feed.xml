<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jihun's Development Blog</title>
    <description>Describe your website here.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Jan 2017 22:42:20 +0900</pubDate>
    <lastBuildDate>Sat, 28 Jan 2017 22:42:20 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Spring AOP</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;프로그래밍을 할 때 핵심 기능(Business Logic)을 작성하면서 디버깅을 위한 log, 보안, 원자성을 위한 Transaction 등의 코드를 작성할 일이 많이 있다. 이러한 코드들을 핵심 기능과 함께 작성하는 것은 의존성을 높이고 재사용성을 낮추기 때문에 바람직하지 않다. Spring에서는 이런한 코드들을 Aspect로 분리하여 작성할 수 있도록 AOP라는 개념을 제공한다. 이 포스트의 예제에서는 AspectJ를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aopaspect-oriented-programming&quot;&gt;AOP(Aspect Oriented Programming)&lt;/h2&gt;

&lt;p&gt;Business logic에 함께 작성되는 Cross cutting concerns(Logging, Transaction, Security 등과 같이 공통적으로 들어가는 코드)를 별도의 Aspect로 분리하여 개발함으로써 의존성을 약하게 하고, 코드의 반복을 줄여서 재사용성을 높일 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;aop-weaving&quot;&gt;AOP-Weaving&lt;/h3&gt;

&lt;p&gt;Aspect는 Spring Framework가 Run time 시에 Proxy의 객체를 하나 만들어서 동적으로 호출함으로써 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aop-구성요소&quot;&gt;AOP 구성요소&lt;/h2&gt;

&lt;h3 id=&quot;joinpoint&quot;&gt;JoinPoint&lt;/h3&gt;

&lt;p&gt;Cross cutting concerns이 삽입되어 동작할 수 있는 위치이다. 하지만 해당 위치에 Joinpoint라는 것을 알려주기 위한 코드를 작성하지 않기 때문에 의존성이 약하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cat &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Meow~&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;위의 코드에서 sound()에 해당한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;advice&quot;&gt;Advice&lt;/h3&gt;

&lt;p&gt;JoinPoint에 삽입되어 실행되는 Cross cutting concerns 이다.&lt;br /&gt;
실행되는 시점에 따라 몇 가지 종류가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;before&lt;/strong&gt; : 메소드가 실행되기 전.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;after&lt;/strong&gt; : 결과에 상관 없이 메소드가 실행된 후.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;after-returning&lt;/strong&gt; : 메소드가 정상적으로 return한 경우.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;after-throwing&lt;/strong&gt; : 메소드가 예외를 던지고 종료한 후.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;around&lt;/strong&gt; : 메소드 호출 전, 후 예외 발생 등 모든 시점.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectSound()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aboutToSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Before : about to sound&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;메소드가 실행되기 전 &lt;code class=&quot;highlighter-rouge&quot;&gt;Before : about to sound&lt;/code&gt;라는 로그를 출력하는 예시이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pointcut&quot;&gt;Pointcut&lt;/h3&gt;

&lt;p&gt;어떤 클래스의 어떤 함수를 JoinPoint로 사용할 것인지를 지정하는 부분이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(void com.example.spring.aop.*.sound())&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;모든 클래스의 sound()함수를 JoinPoint로 지정하는 예시이다. Pointcut의 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Pointcut&lt;/code&gt; 아래에 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;selectSound&lt;/code&gt; 함수와 같이 지정한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aspect&quot;&gt;Aspect&lt;/h3&gt;

&lt;p&gt;Advice와 Pointcut을 포함하고 있는 Class이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.aspectj.lang.annotation.Aspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring-aop/</link>
        <guid isPermaLink="true">http://localhost:4000/spring-aop/</guid>
        
        <category>Spring</category>
        
        
      </item>
    
      <item>
        <title>Python doctest</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;python 표준 라이브러리 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;doctest&lt;/code&gt; 라는 것이 존재한다. documentation string(docstring) 안에 포함된 python 명령을 실행하고 예상 결과를 확인함으로써 코드를 테스트 할 수 있다. 사용법이 매우 간단하며 docstring에 예상 결과 코드를 넣는 것으로 함수의 설명을 대신하는 것과 동시에 코드를 테스트할 수도 있는 장점이 있다. 그러나 코드를 테스트함에 있어서는 코드가 복잡 해짐에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;doctest&lt;/code&gt; 보다는 &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt; 를 사용하는 것이 더 체계적이고 정확할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;simple-example&quot;&gt;Simple example&lt;/h2&gt;

&lt;p&gt;아래와 같은 코드를 넣어서 &lt;em&gt;doctest_simple.py&lt;/em&gt; 라는 파일을 생성한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;my_function(a, b)&lt;/code&gt; 은 a와 b의 곱을 반환하는 함수이고 실행 했을 때 예상되는 결과에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;2*3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'a'*3&lt;/code&gt; 두 가지 경우를 docstring에 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;doctest_simple.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Returns a * b.

    Works with numbers:

    &amp;gt;&amp;gt;&amp;gt; my_function(2, 3)
    6

    and strings:

    &amp;gt;&amp;gt;&amp;gt; my_function('a', 3)
    'aaa'
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run&quot;&gt;Run&lt;/h3&gt;

&lt;p&gt;작성한 코드를 doctest로 실행해보기 위해 아래와 같은 명령어로 실행한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; 옵션으로 doctest를 메인 모듈로 설정하고,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; 옵션으로 테스트 실행 중에 결과를 출력해주도록 설정을 바꿔준다.&lt;br /&gt;
(옵션을 입력하지 않으면 결과를 출력해주지 않는다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m doctest -v doctest_simple.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;

&lt;p&gt;doctest 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 으로 시작하는 python 명령문을 찾아서 실행시키고 아래의 예측 값과 비교하여 결과를 알려준다. 이 때, docstring 에 작성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Returns a * b.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Works with numbers:&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;and strings:&lt;/code&gt; 와 같은 text들은 doctest에 의해 무시되고 테스트 결과에 영향을 주지 않는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Trying:
    my_function(2, 3)
Expecting:
    6
ok
Trying:
    my_function('a', 3)
Expecting:
    'aaa'
ok
1 items had no tests:
    doctest_simple
1 items passed all tests:
   2 tests in doctest_simple.my_function
2 tests in 2 items.
2 passed and 0 failed.
Test passed.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wrong-example&quot;&gt;Wrong example&lt;/h3&gt;

&lt;p&gt;예측 값과 결과 값이 일치하지 않으면 아래와 같은 메세지가 출력되면서 테스트가 실패한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;doctest_simple.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Returns a * b.

    [...]

    &amp;gt;&amp;gt;&amp;gt; my_function(2, 3)
    5
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Trying:
    my_function(2, 3)
Expecting:
    5
**********************************************************************
File &quot;doctest_simple.py&quot;, line 16, in doctest_simple.my_function
Failed example:
    my_function(2, 3)
Expected:
    5
Got:
    6
1 items had no tests:
    doctest_simple
**********************************************************************
1 items had failures:
   1 of   3 in doctest_simple.my_function
3 tests in 2 items.
2 passed and 1 failed.
***Test Failed*** 1 failures.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-tests-by-module&quot;&gt;Run tests by module&lt;/h2&gt;

&lt;p&gt;위에서는 doctest를 하기 위해서 command line 에서 모듈을 실행할 때 doctest 명령을 직접 입력하여 실행했었는데, command line에서 모듈을 실행했을 때 doctest를 실행하도록 하는 방법도 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;testmod()&lt;/code&gt; 를 사용하는 코드를 맨 아래에 다음과 같이 추가하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;command line에서 특정 모듈을 실행하는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;__name__ == '__main__'&lt;/code&gt; 을 만족하여  if문 아래의 문장이 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;doctest_simple.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    &amp;gt;&amp;gt;&amp;gt; my_function(2, 3)
    6
    &amp;gt;&amp;gt;&amp;gt; my_function('a', 3)
    'aaa'
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python doctest_testmod.py -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;으로 실행 해보면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Trying:
    my_function(2, 3)
Expecting:
    6
ok
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;동일한 결과가 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;split-script-running-doctest&quot;&gt;Split script running doctest&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testmod()&lt;/code&gt;에 인자로 모듈명을 넣을 수 있는데 이를 이용하면 여러개의 모듈을 가져와서 차례대로 테스트하는 별도의 테스트 스크립트를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;doctest_testmod_other_modules.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest_simple&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest_simple2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doctest_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doctest_simple2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python doctest_testmod_other_modules.py -v
Trying:
    my_function(2, 3)
Expecting:
    6
ok

[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-doctest-by-file&quot;&gt;Run doctest by file&lt;/h2&gt;

&lt;p&gt;doctest의 내용을 별도의 파일로 분리해서 사용하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;doctest_my_function.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;doctest_in_help.rst&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from doctest_my_function import my_function
&amp;gt;&amp;gt;&amp;gt; my_function(2, 3)
6
&amp;gt;&amp;gt;&amp;gt; my_function('a', 3)
'aaa'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;doctest_testfile.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'doctest_in_help.rst'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-script--result&quot;&gt;Run script &amp;amp; Result&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python doctest_testfile.py -v
Trying:
    from doctest_my_function import my_function
Expecting nothing
ok
Trying:
    my_function(2, 3)
Expecting:
    6
ok
Trying:
    my_function('a', 3)
Expecting:
    'aaa'
ok
1 items passed all tests:
   3 tests in doctest_in_help.rst
3 tests in 1 items.
3 passed and 0 failed.
Test passed.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pymotw.com/2/doctest/&quot;&gt;https://pymotw.com/2/doctest/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python-doctest/</link>
        <guid isPermaLink="true">http://localhost:4000/python-doctest/</guid>
        
        <category>Python</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>Spring AOP advice Error in IntelliJ</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;IntelliJ에서 spring 프로젝트를 생성하고 xml로 AOP advice를 적용하여 실행하면 에러가 발생한다. aspects 라이브러리는 spring 프로젝트를 생성할 때 기본으로 추가 되지만 advice를 사용하기 위해서는 aspectjweaver 를 추가로 설치해줘야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;aop-example&quot;&gt;AOP Example&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logger&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.ac.hansung.spring.aop.Logger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myAspect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectSound&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(void kr.ac.hansung.spring.aop.*.sound())&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:before&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aboutToSound&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectSound&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;error-message&quot;&gt;Error Message&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;경고: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.event.internalEventListenerProcessor': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Cannot create inner bean '(inner bean)#5e57643e' of type [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice] while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#5e57643e': Failed to introspect bean class [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice] for lookup method metadata: could not find class that it depends on; nested exception is java.lang.NoClassDefFoundError: org/aspectj/lang/JoinPoint
Exception in thread &quot;main&quot; org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.context.event.internalEventListenerProcessor': BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Cannot create inner bean '(inner bean)#5e57643e' of type [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice] while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#5e57643e': Failed to introspect bean class [org.springframework.aop.aspectj.AspectJMethodBeforeAdvice] for lookup method metadata: could not find class that it depends on; nested exception is java.lang.NoClassDefFoundError: org/aspectj/lang/JoinPoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-aspectjweaver-with-maven&quot;&gt;Install aspectjweaver with maven&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- aspectj --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.aspectj&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aspectjweaver&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.6.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/intellij-spring-aop-advice/</link>
        <guid isPermaLink="true">http://localhost:4000/intellij-spring-aop-advice/</guid>
        
        <category>Spring</category>
        
        
      </item>
    
      <item>
        <title>CircleCI Background Process</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;python으로 Simple Http Server를 띄우고 selenium으로 web page title을 확인해보는 간단한 테스트 코드를 CircleCi에 올렸다. 서버를 background로 실행시키도록 스크립트 명령에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;를 붙여서 사용해봤더니 title이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Problem loading page&lt;/code&gt;를 반환해서 테스트에 실패했다. 문제의 원인은 circle.yml에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;를 사용할 수 없기 때문이었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;background: true&lt;/code&gt; 을 사용하면 해결된다. 원인을 파악하는데 시간이 꽤 오래 걸렸었는데 알고보니 circleci docs에 맨 첫줄에 답이 나와있었다. docs를 처음부터 잘 읽어봐야겠다는 필요성을 다시 한 번 느꼈다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-발생-코드&quot;&gt;문제 발생 코드&lt;/h2&gt;

&lt;h4 id=&quot;simple-testpy&quot;&gt;&lt;em&gt;simple-test.py&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;selenium으로 web browser를 띄우고 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000&lt;/code&gt;으로 접속해 title을 확인하는 테스트 코드이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;simple-test.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_selenium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Directory listing for /'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;circleyml&quot;&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;CircleCI의 환경을 설정하는 파일로 테스트 코드를 실행하기 전에 simple 서버를 백그라운드로 띄우고자 &lt;code class=&quot;highlighter-rouge&quot;&gt;python -m http.server 8000&lt;/code&gt; 명령에 &amp;amp;를 붙여보았다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]

test:
  pre:
    - python -m http.server 8000 &amp;amp;
  override:
    - pytest selenium-browser.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;build-result&quot;&gt;Build Result&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000&lt;/code&gt; 요청을 했을 때 title 값이 원하는 값이 반환 되지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Problem loading page&lt;/code&gt;라는 값을 반환해서 테스트에 실패한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-background/Build Result.png&quot; alt=&quot;Build Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/docs/background-process/&quot;&gt;CircleCI Background docs&lt;/a&gt; 에 보면 &lt;em&gt;circle.yml&lt;/em&gt; 을 통해서 background process 설정이 가능하다고 한다. 하지만 command line 마지막에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 를 붙여서 background를 사용할 수는 없다고 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-background/background.png&quot; alt=&quot;Build Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래는 이 방법을 적용하여 &lt;em&gt;circle.yml&lt;/em&gt; 을 수정한 결과이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]

test:
  pre:
    - python -m http.server 8000:
      background: true
  override:
    - pytest selenium-browser.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;수정한 결과를 push 했더니 Build가 성공했다.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/circleci-background/</link>
        <guid isPermaLink="true">http://localhost:4000/circleci-background/</guid>
        
        <category>CI</category>
        
        <category>CircleCI</category>
        
        
      </item>
    
      <item>
        <title>CircleCI 에서 python 3.6.0 이용하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;python 최신 버전인 3.6.0 을 사용하여 CircleCI를 붙여봤는데 오류가 발생했다. 3.6.0이 최신 버전이기 때문에 CircleCI에서 아직 지원을 안 하는듯하다. 해결방법은 CircleCI 원격 컴퓨터의 .pyenv repository를 최신버전으로 pull 받도록 circle.yml를 수정하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-360-error-in-circleci&quot;&gt;Python 3.6.0 Error in CircleCI&lt;/h2&gt;

&lt;p&gt;아래와 같이 python version 을 3.6.0 으로 설정하도록 &lt;em&gt;circle.yml&lt;/em&gt; 을 작성한 후&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;machine:
  python:
    version: 3.6.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;push를 했더니 CI가 빌드를 수행하다가 &lt;em&gt;MACHINE&lt;/em&gt; 단계에서 아래와 같은 오류가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-python3.6.0/build fail.png&quot; alt=&quot;circleci python3.6.0 fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-python-360-in-circleci&quot;&gt;Use Python 3.6.0 in CircleCI&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt; 파일을 아래와 같이 변경해서 .pyenv repositofy를 git pull 하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;machine:
  pre:
    - cd /opt/circleci/.pyenv; git pull
  python:
    version: 3.6.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;push 해서 확인해보면 python 3.6.0 이 설치됐다는 메세지를 확인할 수 있고 build가 성공한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-python3.6.0/build success.png&quot; alt=&quot;circleci python3.6.0 success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/41381930/use-python-3-6-0-in-circleci/&quot;&gt;http://stackoverflow.com/questions/41381930/use-python-3-6-0-in-circleci/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/circleci-python3.6.0/</link>
        <guid isPermaLink="true">http://localhost:4000/circleci-python3.6.0/</guid>
        
        <category>Python</category>
        
        <category>CI</category>
        
        <category>CircleCI</category>
        
        
      </item>
    
      <item>
        <title>이미 push된 file .gitignore 적용하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;git으로 관리하고 싶지 않은 파일들은 .gitignore 에 명시함으로써 해당 파일을 무시할 수 있다. 하지만 종종 무시할 파일을 .gitignore 에 추가하기 전에 git push 해버리는 경우가 있다. 이 때 뒤늦게 .gitignore 을 수정하여 push를 하지만 원격 저장소에서 해당 파일은 사라지지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apply-gitignore&quot;&gt;Apply .gitignore&lt;/h2&gt;

&lt;p&gt;아래의 git 명령들을 실행해주면 .gitignore의 파일들이 적용되어 원격 저장소에서 사라진다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rm -r --cached .
$ git add .
$ git commit -m &quot;Apply .gitignore&quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;같은-실수를-반복하지-않기-위한-git-사용-습관&quot;&gt;같은 실수를 반복하지 않기 위한 git 사용 습관&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cjh5414.github.io/git-habit/&quot;&gt;좋은 git 사용 습관&lt;/a&gt;&lt;br /&gt;
git commit 과정에 대한 이해와 좋은 commit 습관에 대한 포스트이다.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/gitignore-update/</link>
        <guid isPermaLink="true">http://localhost:4000/gitignore-update/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>좋은 git 사용 습관</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;git을 사용하는 방법에는 크게 CLI, GUI가 있다. CLI를 사용할 줄 알면 GUI도 사용할 수 있지만 반대는 성립하지 않는다. CLI는 Linux 기반은 terminal, windows에서는 git bash으로 사용할 수 있는데 모든 컴퓨터에서 동일한 방법으로 이용하기 때문에 편리하다. Git의 모든 기능을 지원하는 것은 CLI 뿐이라고 한다. CLI를 이용한 git 사용법을 익혀두는 것은 매우 유용할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;git을 CLI로 사용하는 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;message&quot;&lt;/code&gt; 두 가지 명령만으로 아주 간편하게 commit을 할 수 있다. 하지만 이런 방법은 좋지 않은 습관이다. 원하지 않는 파일들도 함께 저장소에 포함될 수 있을 뿐만 아니라 git의 유용한 기능들을 간과하게 된다. git GUI도 마찬가지 이다. git GUI를 사용하고 싶다면 git CLI를 먼저 익힌 후에 사용하는 것을 추천한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-git-status&quot;&gt;1. git status&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git status&lt;/code&gt; 명령으로 git으로부터 추적되고 있는 파일과 새로 추가된 파일들을 확인한다.&lt;br /&gt;
추적되고 있는 파일 중에 수정이 일어났으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Changes not staged for commit:&lt;/code&gt; 아래에
&lt;code class=&quot;highlighter-rouge&quot;&gt;modified : file_name&lt;/code&gt;과 같이 표시된다.&lt;/p&gt;

&lt;p&gt;새로 추가된 파일이 있으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Untracked files:&lt;/code&gt; 아래에 파일명이 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git status.png&quot; alt=&quot;git status&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-gitignore&quot;&gt;2. .gitignore&lt;/h3&gt;

&lt;p&gt;git으로 관리하기를 원하지 않는 파일은 .gitignore에 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;.cache/&quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git status&lt;/code&gt; 명령을 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.cache/&lt;/code&gt;은 사라지고 &lt;code class=&quot;highlighter-rouge&quot;&gt;modified: .gitignore&lt;/code&gt;이 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/gitignore.png&quot; alt=&quot;gitignore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;의미있는 단위의 commit을 위해 .gitignore 변경 사항을 먼저 commit 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .gitignore
$ git commit -m &quot;Add file_name on .gitignore&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-git-diff&quot;&gt;3. git diff&lt;/h3&gt;

&lt;p&gt;다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git status&lt;/code&gt; 명령을 실행해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git diff before.png&quot; alt=&quot;git diff before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;selenium-test.py&lt;/em&gt; 은 수정한 파일이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git diff selenium-test.py&lt;/code&gt; 명령으로 내가 어떤 내용을 수정했는지 제대로 한 것은 맞는지 확인해본다. (뒤의 파일명을 제거하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git diff&lt;/code&gt; 명령만 입력하면 아직 add 하지 않은 모든 파일의 변경사항을 출력해준다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git diff.png&quot; alt=&quot;git diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;-빨간색으로 표시된 부분은 삭제 된 내용이고&lt;br /&gt;
+초록색으로 표시된 부분은 추가 된 내용이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-git-add-file_name&quot;&gt;4. git add &lt;em&gt;file_name&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;.gitignore 를 commit 하는 과정에서도 봤지만 commit을 하기 전에 무조건 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git add .&lt;/code&gt;명령을 사용하는 것은 좋지 않은 습관이다. 원하지 않는 파일들도 함께 저장소에 포함될 수 있다. 내가 수정한 파일이 맞는지 확인하고 하나씩 git add 하는 습관을 들이는 것이 좋다.&lt;/p&gt;

&lt;p&gt;아래의 예시에서 보면 수정된 &lt;em&gt;selenium-test.py&lt;/em&gt; 과 새로 추가된 &lt;em&gt;test.py&lt;/em&gt; 이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git diff before.png&quot; alt=&quot;before git add&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모두 내가 작업한 파일들이 맞는지 확인 했으니 git add 해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add selenium-test.py test.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-git-commit&quot;&gt;5. git commit&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git add after.png&quot; alt=&quot;after git add&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git status&lt;/code&gt; 명령으로 다시 확인해 보면 두 파일의 위치가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Changes to be committed:&lt;/code&gt; 으로 변경 되었고 commit 할 준비가 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/git commit.png&quot; alt=&quot;git commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git commit&lt;/code&gt; 명령을 실행하면 vi로 commit message를 작성하는 창으로 전환되고 메세지 작성 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;으로 저장 종료하면 commit이 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Changes to be committed:&lt;/code&gt;에 존재하는 파일들만 commit이 되고 add하지 않은 파일들은 commit 되지 않는다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git commit -m &quot;commit message&quot;&lt;/code&gt; 을 이용하면 commit 명령과 동시에 commit message를 입력할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;scm-breeze&quot;&gt;SCM Breeze&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scmbreeze/scm_breeze&quot;&gt;SCM Breeze&lt;/a&gt;라는 터미널에서 git을 편리하게 사용하도록 도와주는 유용한 tool이 존재한다.&lt;br /&gt;
git 명령들을 사용하는 중에 다양한 색깔과 추가 메세지로 더 가독성 있게 보여주고 git 명령어들의 alias를 지정해줘서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; 등의 명령어를 &lt;code class=&quot;highlighter-rouge&quot;&gt;gs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ga&lt;/code&gt;와 같이 사용할 수 있다.&lt;br /&gt;
또한 변경이 있는 file들에게 번호를 부여하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;ga 1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gd 1&lt;/code&gt; 와 같이 git 명령어에 파일명을 입력하지 않고 번호로 편리하게 조작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/scm breeze1.png&quot; alt=&quot;scm breeze1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/git-habit/scm breeze2.png&quot; alt=&quot;scm breeze2&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/git-habit/</link>
        <guid isPermaLink="true">http://localhost:4000/git-habit/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Selenium with python, chrome, pytest</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-selenium-pytest&quot;&gt;Install Selenium, pytest&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install selenium
$ pip install pytest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;chromedriver-setting&quot;&gt;chromedriver setting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://sites.google.com/a/chromium.org/chromedriver/downloads&quot;&gt;chromedriver download&lt;/a&gt; 에서 chromedriver를 다운받는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;simple-usage&quot;&gt;Simple Usage&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;selenium-test.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'chromedriver PATH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cjh5414.github.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;chromedriver PATH 에는 &lt;em&gt;/usr/local/bin/chromedriver&lt;/em&gt; 와 같이 다운받은 chromedriver가 실제로 위치한 경로를 입력해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python selenium-test.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;코드를 돌려보면 driver.get()에서 지정한 url로 브라우저가 실행됐다가 종료되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pytest&quot;&gt;pytest&lt;/h2&gt;

&lt;p&gt;selenium을 통해 chrome browser 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://cjh5414.github.io&lt;/code&gt; 으로 접속했을 때 title이 &lt;code class=&quot;highlighter-rouge&quot;&gt;jihun's Development blog •&lt;/code&gt;과 같은지 확인해보는 테스트코드로 살짝 변경해보았다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;selenium&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_selenium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webdriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'chromedriver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cjh5414.github.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jihun's Development blog •&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pytest 는 test로 시작하는 메소드를 찾아서 테스트를 실행시켜 준다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pytest selenium-test.py&lt;/code&gt;의 명령으로 결과를 확인해보면 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/python-selenium/pytest result.png&quot; alt=&quot;pytest result&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python-selenium-chrome/</link>
        <guid isPermaLink="true">http://localhost:4000/python-selenium-chrome/</guid>
        
        <category>Python</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>IntelliJ JSTL Maven</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;IntelliJ 에서 JSTL을 사용하기 위해 Maven을 이용하여 설치를 했는데&lt;br /&gt;
HTTP Status 500 - The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application&lt;br /&gt;
이라는 오류가 발생했다. Tomcat_Home/lib/ 에 jstl-1.2.jar를 추가했더니 해결이 됐다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;maven-project&quot;&gt;Maven Project&lt;/h2&gt;

&lt;p&gt;프로젝트에서 Maven을 사용할 수 있도록 framework support를 추가한다.&lt;br /&gt;
좌측의 Project Directory를 우클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Frameworks Support&lt;/code&gt;를 클릭하면 아래와 같은 화면이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-jstl-maven/maven project.png&quot; alt=&quot;Maven Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래쪽의 Maven을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; 버튼을 누른다.&lt;br /&gt;
Project Directory에 pom.xml이 추가된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-dependency-to-maven-pomxml&quot;&gt;Add Dependency to Maven pom.xml&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;groupId&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;helloMVC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jstl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pom.xml을 수정하면 아래 쪽에 추가한 dependency를 import 하라는 메세지가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-jstl-maven/maven import.png&quot; alt=&quot;maven import&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Import Changes&lt;/code&gt; 를 클릭 하면된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-jstl-maven/maven result.png&quot; alt=&quot;maven result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Project Directory를 다시 확인해보면 External Libraries 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Maven: javax.servlet:jstl:1.2&lt;/code&gt; 가 추가된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exception--the-absolute-uri-httpjavasuncomjstlcore-cannot-be-resolved&quot;&gt;Exception : The absolute uri: http://java.sun.com/jstl/core cannot be resolved&lt;/h3&gt;

&lt;p&gt;jstl 코드를 추가하여 프로젝트를 돌려보면&lt;/p&gt;

&lt;p&gt;HTTP Status 500 - The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application&lt;/p&gt;

&lt;p&gt;이라는 오류 메세지와 함께 Exception이 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-jstl-maven/error.png&quot; alt=&quot;Error Message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resolve-error&quot;&gt;Resolve Error&lt;/h2&gt;

&lt;p&gt;해결 방법으로는 Tomcat이 깔려있는 위치에 lib 폴더 밑에 &lt;em&gt;jstl-1.2.jar&lt;/em&gt; 파일을 추가해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/javax.servlet/jstl/1.2&quot;&gt;jstl-1.2.jar Download&lt;/a&gt;에 가서 다운을 받고 Tomcat이 깔려있는 위치로 이동 한 후 &lt;em&gt;Tomcat/lib/&lt;/em&gt; 으로 다운받은 파일을 옮겨주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /Library/Tomcat/lib/
$ mv /Users/jihun/Downloads/jstl-1.2.jar .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-jstl-maven/jstl jar file.png&quot; alt=&quot;jstl jar file&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/IntelliJ-jstl-maven/</link>
        <guid isPermaLink="true">http://localhost:4000/IntelliJ-jstl-maven/</guid>
        
        <category>IntelliJ</category>
        
        
      </item>
    
      <item>
        <title>IntelliJ constructor, getter, setter code generation</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;개발할 때 좋은 도구를 사용하는 것은 생산성을 증가시키기 때문에 중요한 요소라고 생각된다. 개발 도구의 유용한 기능들을 조사하고 익히는 노력들은 가치가 있고 능수능란하게 사용할 수 있게 되면 개발의 재미도 더해준다.&lt;br /&gt;
IntelliJ에는 constructor, getter, setter, toString, equals 등의 코드를 단축키 하나로 생성해주는 편리한 기능이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;customer-class&quot;&gt;Customer Class&lt;/h3&gt;

&lt;p&gt;Customer class에 대해 constructor, getter, setter, toString 코드를 생성 해본다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-generation-단축키&quot;&gt;Code generation 단축키&lt;/h3&gt;

&lt;p&gt;코드를 생성하고자 하는 위치로 커서를 이동한 후&lt;br /&gt;
Mac 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command ⌘&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; &lt;br /&gt;
Window 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Insert&lt;/code&gt;&lt;br /&gt;
단축키를 누르면 아래와 같은 메뉴가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-code-generator/generator.png&quot; alt=&quot;generator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원하는 것을 선택하면 Class의 Fields 리스트가 나온다. 코드를 생성하고 싶은 Fields 를 드래그하여 선택한 후 OK 버튼을 누르면 코드가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-code-generator/constructor.png&quot; alt=&quot;constructor&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;getter--setter&quot;&gt;Getter &amp;amp; Setter&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-code-generator/getter setter.png&quot; alt=&quot;getter setter&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tostring&quot;&gt;toString&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Customer{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;id='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;, name='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;, email='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/IntelliJ-code-generation/</link>
        <guid isPermaLink="true">http://localhost:4000/IntelliJ-code-generation/</guid>
        
        <category>IntelliJ</category>
        
        
      </item>
    
      <item>
        <title>IntelliJ Tomcat Deployment - Export war file</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tomcat-deployment&quot;&gt;Tomcat Deployment&lt;/h2&gt;

&lt;p&gt;Tomcat을 이용하여 배포할 때 &lt;em&gt;webapps/&lt;/em&gt; 폴더 아래에 &lt;em&gt;myapp.war&lt;/em&gt; 파일을 위치시키고 tomcat을 실행시키면 &lt;em&gt;webapps/myapp&lt;/em&gt; 이름으로 폴더가 생성된다. 이 때 이 프로젝트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/myapp/index.jsp&lt;/code&gt; 와 같이 url이 지정된다. url에서 myapp을 제거하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;으로 시작하도록 하고 싶다면 &lt;em&gt;webapps/myapp/&lt;/em&gt; 하위에 존재하는 파일들을 &lt;em&gt;webapps/ROOT/&lt;/em&gt; 하위로 모두 옮기면 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/index.jsp&lt;/code&gt; 처럼 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploded-war&quot;&gt;Exploded war&lt;/h2&gt;

&lt;p&gt;IntelliJ web application project 생성은 &lt;a href=&quot;https://cjh5414.github.io/intellij-web-project/&quot;&gt;여기&lt;/a&gt;를 참고하면 된다.&lt;br /&gt;
web application을 생성하고 run server을 하면 out이라는 폴더가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/after run server.png&quot; alt=&quot;After run server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;out/artifacts/myapp_war_exploded&lt;/em&gt; 폴더가 존재하는데 war파일이 풀어진 형태이다. 이 폴더를 그대로 톰켓의 &lt;em&gt;webapps/&lt;/em&gt; 에 복사해도 배포가 가능하지만 war파일로 만들어서 관리하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;export-war-file&quot;&gt;Export war file&lt;/h2&gt;

&lt;p&gt;프로젝트명을 클릭하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command ⌘&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;↓&lt;/code&gt; 키를 눌러서 Project Structure 창을 열고 좌측의 Artifacts를 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/open artifacts.png&quot; alt=&quot;open artifacts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp:war exploded&lt;/code&gt; 라고 보이는 위 쪽에 + 버튼을 누르면 추가를 할 수 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web Application: Archive&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;For 'myapp:war exploded'&lt;/code&gt;를 선택하면 된다. 기본으로 설정된 myapp의 war exploded에 대한 war파일을 생성하도록 build를 추가하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/archive.png&quot; alt=&quot;archive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;중간 지점을 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp_war.war&lt;/code&gt;으로 이름이 설정되어 있다. 우클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.war&lt;/code&gt;으로 이름을 바꿔준다. (위에서도 말했듯이 .war 앞의 이름으로 배포 폴더가 생성되고 url이 정해진다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/rename war file.png&quot; alt=&quot;Rename war file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우측 하단의 Apply 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설정이 완료됐으면 상단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Artifacts..&lt;/code&gt;를 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/build.png&quot; alt=&quot;Build&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같은 창이 뜨면 &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp:war&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Build&lt;/code&gt;를 클릭하여 war을 생성하는 build을 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/build artifact.png&quot; alt=&quot;Build artifact&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;out/artifacts/myapp_war&lt;/em&gt; 라는 폴더가 생성되고 &lt;em&gt;myapp.war&lt;/em&gt; 파일도 생성 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-war/war file created.png&quot; alt=&quot;war file created&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/IntelliJ-tomcat-deployment-export-war-file/</link>
        <guid isPermaLink="true">http://localhost:4000/IntelliJ-tomcat-deployment-export-war-file/</guid>
        
        <category>IntelliJ</category>
        
        
      </item>
    
      <item>
        <title>CircleCI와 Heroku를 이용하여 배포 자동화 하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;매일 오전 학식 메뉴를 Notification 해주는 간단한 프로그램을 만들었었다. 개발할 당시 코드는 github repository으로도 관리를 하고 heroku 배포를 위해 heroku repository에서도 관리를 했었다. 소스코드를 수정하면 github와 heroku repository 두 가지 모두에 push를 해줘야 했었다. 최근 CircleCI를 간단하게 사용해볼 경험이 있었는데 이 프로젝트에 CircleCI heroku 배포 자동화를 적용해보면 좋을 것 같다는 생각이 들었다. CircleCI을 사용하여 배포 자동화를 하면 github에 push를 할 때마다 알아서 빌드를 하고 배포까지 해주기 때문에 편리하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heroku--circleci-deployment-setting&quot;&gt;Heroku &amp;amp; CircleCI Deployment Setting&lt;/h2&gt;

&lt;h3 id=&quot;1-heroku-api-key&quot;&gt;1. Heroku API key&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dashboard.heroku.com/account&quot;&gt;Heroku account&lt;/a&gt; 에 가서 API key를 복사한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/heroku api.png&quot; alt=&quot;Heroku CircleCI Deployment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/dashboard&quot;&gt;Heroku Dashboard&lt;/a&gt;에서 배포 자동화를 적용할 프로젝트의 설정 페이지로 이동한다.&lt;br /&gt;
(톱니바퀴 모양의 버튼을 클릭하면 된다.)&lt;br /&gt;
좌측의 리스트 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Heroku Deployment&lt;/code&gt;를 클릭한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Step 1: Heroku API key&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add new key&lt;/code&gt;입력란에 복사해뒀던 API key를 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Save Heroku Key&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/insert api in circleci.png&quot; alt=&quot;Insert api key in circleci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-associate-a-heroku-ssh-key-with-your-account&quot;&gt;2. Associate a Heroku SSH key with your account&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Step 2: Associate a Heroku SSH key with your account&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set User to [username]&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/heroku SSH key.png&quot; alt=&quot;Herkou SSH key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-add-deployment-settings-to-your-circleyml-file&quot;&gt;3. Add deployment settings to your circle.yml file&lt;/h3&gt;

&lt;p&gt;배포 자동화를 위한 설정을 &lt;em&gt;circle.yml&lt;/em&gt; 파일을 이용한다.&lt;br /&gt;
아래와 같이 branch와 herkou의 &lt;em&gt;appname&lt;/em&gt; 을 입력한다.&lt;/p&gt;

&lt;p&gt;github에 push가 되면 CircleCI는 &lt;em&gt;circle.yml&lt;/em&gt; 파일에 있는 설정들을 바탕으로 알아서 빌드를 수행한다. 그리고 아래와 같이 &lt;em&gt;cricle.yml&lt;/em&gt; 파일에 deployment를 설정해주면 위에서 설정한 Heroku의 정보들을 이용하여 heroku의 &lt;em&gt;appname&lt;/em&gt; 으로 배포를 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
[...]

deployment:
    production:
        branch: master
        heroku:
            appname: hansung-bab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;수정한 &lt;em&gt;circle.yml&lt;/em&gt; 을 CircleCI에서 적용할 수 있도록 git push 해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add circle.yml
$ git commit -m &quot;Add heroku deployment setting on circle.yml&quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;수정한 코드를 push하면 빌드를 알아서 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment-result&quot;&gt;Deployment Result&lt;/h2&gt;

&lt;p&gt;빌드가 성공했고 결과를 보면 DEPLOYMENT 부분이 추가된 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/build result.png&quot; alt=&quot;Herkou Build Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Deploy to hansung-bab 부분을 자세히 보면 Heroku에 배포 되었다는 log 메세지가 보인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/build result detail.png&quot; alt=&quot;Herkou Build Result Detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Heroku에서도 확인해 보면 빌드가 성공하고 배포되었다는 메세지를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/heroku-circleci-deployment/deployment result.png&quot; alt=&quot;Herkou Deployment Result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/docs/continuous-deployment-with-heroku/&quot;&gt;https://circleci.com/docs/continuous-deployment-with-heroku/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/circleci-heroku/</link>
        <guid isPermaLink="true">http://localhost:4000/circleci-heroku/</guid>
        
        <category>CI</category>
        
        <category>CircleCI</category>
        
        <category>Heroku</category>
        
        
      </item>
    
      <item>
        <title>IntelliJ Web Project 생성 및 실행 (Tomcat Server)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Eclipse를 이용하여 Java web framework 를 공부 중인데 불편한 점이 있어서 IntelliJ는 어떨까 해서 사용해보려고 한다. 우선 Tomcat을 사용하여 web application 을 생성하고 실행해 보았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;intellij-install&quot;&gt;IntelliJ Install&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/&quot;&gt;IntelliJ Download&lt;/a&gt; 에 가면 쉽게 다운 받을 수 있다.&lt;br /&gt;
학생이면 학교메일을 통해 ultimate 버전을 무료로 사용할 수 있다.&lt;br /&gt;
&lt;a href=&quot;https://www.jetbrains.com/student/&quot;&gt;For Students&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;web-project-create&quot;&gt;Web Project Create&lt;/h2&gt;

&lt;p&gt;IntelliJ를 실행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create New Project&lt;/code&gt;를 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/new project.png&quot; alt=&quot;new project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;좌측에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Java Enterprise&lt;/code&gt;를 선택하고 Additional Libraries and Frameworks에서 Web Application을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/web app.png&quot; alt=&quot;Web application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;상단을 보면 Application Server를 선택하는 부분이 있는데 좌측에 &lt;code class=&quot;highlighter-rouge&quot;&gt;New&lt;/code&gt; 버튼을 클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat Server&lt;/code&gt;를 클릭한다.&lt;br /&gt;
tomcat이 위치한 경로를 입력해주면 해당하는 tomcat의 version이 자동으로 뜬다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/tomcat setting.png&quot; alt=&quot;Tomcat setting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;project의 이름과 경로를 입력하고 finish를 누르면 프로젝트가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/project name.png&quot; alt=&quot;project name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-run&quot;&gt;Project Run&lt;/h2&gt;

&lt;p&gt;project를 생성하면 &lt;em&gt;index.jsp&lt;/em&gt; 파일이 생성되는데 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/index file.png&quot; alt=&quot;index file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그대로 server를 run 해보면 웹 브라우저가 자동으로 실행되면서 &lt;em&gt;index.jsp&lt;/em&gt; 파일이 아래와 같은 결과로 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/intellij-project/result.png&quot; alt=&quot;Result&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/intellij-web-project/</link>
        <guid isPermaLink="true">http://localhost:4000/intellij-web-project/</guid>
        
        <category>IntelliJ</category>
        
        
      </item>
    
      <item>
        <title>CircleCI 붙이기 - github, pytest</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;github으로 관리하고 있는 프로젝트에 circleci를 붙이는 방법에 대해서 알아보았다. circleci와 같은 CI 툴을 이용하면 git commit을 할때마다 알아서 build 하고 결과를 알려주기 때문에 매우 편리하고 compile, test, deployment 등을 자동화 할 수 있는 장점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;circleci-add-projects&quot;&gt;CircleCI Add projects&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/signup/&quot;&gt;Circleci signup&lt;/a&gt; 에 들어가서 github을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-pytest/signup.png&quot; alt=&quot;Circleci signup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-pytest/add projects.png&quot; alt=&quot;Circleci add projects&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1번에서 organization을 선택한다. 원하는 organization이 보이지 않는다면 &lt;a href=&quot;https://github.com/settings/connections/applications/78a2ba87f071c28e65bb&quot;&gt;GitHub’s application permissions&lt;/a&gt;에 가서 해당 organization의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Grant access&lt;/code&gt;을 눌러주면 된다.&lt;/p&gt;

&lt;p&gt;그 다음 2번에서 원하는 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build project&lt;/code&gt;를 선택한다.&lt;/p&gt;

&lt;p&gt;Build 결과는 &lt;a href=&quot;https://circleci.com/dashboard&quot;&gt;CircleCI Builds&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pytest&quot;&gt;pytest&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-pytest/result fail.png&quot; alt=&quot;result fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;project를 Circleci에 추가하면 알아서 Build를 진행한다. 성공하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;NO TESTS&lt;/code&gt;라는 경고 메세지가 뜬다. 경고 메세지를 없애기 위해 pytest를 이용하여 간단한 테스트 코드를 추가해서 commit을 해보았다.&lt;/p&gt;

&lt;p&gt;우선 pytest를 설치하고 requirements.txt에 패키지 리스트를 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install pytest
$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;매우 간단한 test를 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test_sample.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;돌려보면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pytest test_sample.py
============================= test session starts ==============================
platform darwin -- Python 3.5.2, pytest-3.0.5, py-1.4.32, pluggy-0.4.0
rootdir: /Users/jihun/Projects/hansung-bab, inifile:
collected 1 items

test_sample.py .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;통과한다.
commit 을 하고 Build 결과를 확인해보면 그래도 아직 &lt;code class=&quot;highlighter-rouge&quot;&gt;NO TESTS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;circleci에서 test를 실행할 수 있도록 추가적인 설정이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;circleyml&quot;&gt;circle.yml&lt;/h2&gt;

&lt;p&gt;CircleCI는 &lt;em&gt;circle.yml&lt;/em&gt; 파일을 통해 build 할 때 필요한 설정들을 지정할 수 있다.&lt;br /&gt;
test를 실행하는 명령과 프로젝트에 필요한 패키지들을 설치하는 명령을 아래와 같은 형식으로 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;circle.yml&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test:
    override:
        - pytest test_sample.py

dependencies:
    pre:
       -  pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다시 commit을 해보면 경고 메세지가 사라지고 build 성공하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/circleci-pytest/result success.png&quot; alt=&quot;result success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/docs/manually/&quot;&gt;Circle CI manually&lt;/a&gt;에 Circleci의 구체적인 사용법에 대해 나와있으니 참고하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/docs/getting-started/&quot;&gt;https://circleci.com/docs/getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/docs/manually/&quot;&gt;https://circleci.com/docs/manually/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/circleci-pytest/</link>
        <guid isPermaLink="true">http://localhost:4000/circleci-pytest/</guid>
        
        <category>CI</category>
        
        <category>CircleCI</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>Tomcat을 이용한 servlet 배포</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;eclipse-war-파일-생성&quot;&gt;Eclipse war 파일 생성&lt;/h2&gt;

&lt;p&gt;eclipse에서 해당 프로젝트를 우클릭하여 Export 기능을 선택한다.&lt;br /&gt;
Web -&amp;gt; WAR file을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet-deploy/export.png&quot; alt=&quot;Export&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 Destination을 Tomcat이 위치한 폴더 아래의 &lt;code class=&quot;highlighter-rouge&quot;&gt;webapps&lt;/code&gt; 아래에 war 파일이 위치하도록 설정해줘야 한다.&lt;/p&gt;

&lt;p&gt;해당 위치로 가보면 war 파일이 생성된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet-deploy/warfile.png&quot; alt=&quot;war file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tomcat-run&quot;&gt;Tomcat Run&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tomcat을 실행하기 전에는 항상 Eclipse의 tomcat이 실행되고 있는지 확인하고 종료해주는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Tomcat을 실행시키면 webapps에 존재하는 war 파일 압축을 풀고 폴더를 생성하여 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet-deploy/tomcat run.png&quot; alt=&quot;Tomcat run&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/servlet-tomcat-deploy/</link>
        <guid isPermaLink="true">http://localhost:4000/servlet-tomcat-deploy/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>간단한 login 기능의 Servlet Project</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eclipse를 이용하여 간단한 login 기능의 Servlet Project를 만들어 본다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-project&quot;&gt;Create Project&lt;/h2&gt;

&lt;p&gt;File -&amp;gt; New -&amp;gt; Dynamic Web Project 를 선택하여 새로운 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/project-create.png&quot; alt=&quot;project create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 이름을 입력하고 web.xml 파일을 생성한다는 체크박스를 선택하고 Finish 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/web module.png&quot; alt=&quot;web module&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;web.xml 파일을 열어보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;welcome-file&lt;/code&gt;라는 태그가 많이 존재하는 것을 볼 수 있다. 일반적으로 웹 사이트를 url을 통해 호출하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com/index.html&lt;/code&gt; 같이 뒷 부분에 반환되는 file을 사용자가 명시하지 않더라도 welcome-file 리스트 중에 선택하여 반환 해준다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WebApp_ID&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;display-name&amp;gt;&lt;/span&gt;helloServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/display-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-indexhtml&quot;&gt;Create index.html&lt;/h2&gt;

&lt;p&gt;웹 사이트를 호출했을 때 반환되는 index.html 을 생성한다. WebContent 폴더를 우클릭하여 New -&amp;gt; HTML File을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/index.png&quot; alt=&quot;index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래와  username과 password이 존재하는 form의 html 코드를 작성해준다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Servlet Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DoLogin&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		Username: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; Password:
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Press&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;서버를 실행해보면 아래와 같은 결과가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/index result.png&quot; alt=&quot;index result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저를 통해서도 실행 가능하고 url에 index.html을 제거하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/helloServlet&lt;/code&gt; 까지만 입력하여도 동일한 결과가 나타난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/index result browser.png&quot; alt=&quot;index result browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;username과 password를 입력해서 Press 버튼을 눌러보면
&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Status 404 - /helloServlet/DoLogin&lt;/code&gt; 오류가 뜬다. 그 이유는 form태그에 action에 설정해두었던 DoLogin logic 을 아직 구현하지 않았기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-dologin-servlet&quot;&gt;Create DoLogin Servlet&lt;/h2&gt;

&lt;p&gt;src폴더에 패키지를 하나 생성하고 그 아래에 servlet을 생성한다. POST만 사용할 것이므로 doGet 체크박스는 해제한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/create servlet.png&quot; alt=&quot;create servlet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자동으로 생성된 코드에 요청한 username과 password을 그대로 반환하여 그대로 보여주는 간단한 기능의 코드를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Servlet implementation class DoLogin
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/DoLogin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoLogin&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see HttpServlet#HttpServlet()
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated constructor stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// read form data&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// perform business logic&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Build HTML code&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;h2&amp;gt; Your name is : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Your password is : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/h2&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;서버를 다시 실행해서 확인해보면 동일한 결과가 나타나고,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/result1.png&quot; alt=&quot;result1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;username과 password를 입력하고 press버튼을 누르면 아래와 같은 결과를 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/servlet/result2.png&quot; alt=&quot;result2&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/servlet-project/</link>
        <guid isPermaLink="true">http://localhost:4000/servlet-project/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Spring project start</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이클립스를 통해서 기본적인 spring 프로젝트를 생성하는 방법에 대해서 알아본다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;project-create&quot;&gt;Project Create&lt;/h3&gt;

&lt;p&gt;좌측 상단의 프로젝트 생성 버튼을 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ohter...&lt;/code&gt; 를 클릭한다. 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;command + N&lt;/code&gt;를 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/project create.png&quot; alt=&quot;project create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring -&amp;gt; Spring Legacy Project 를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/spring legacy.png&quot; alt=&quot;spring legacy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Project name을 입력하고 MVC Project를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/MVC Project.png&quot; alt=&quot;MVC Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;패키지 명을 입력하고 Finish를 누르면 프로젝트가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;project-run&quot;&gt;Project Run&lt;/h3&gt;

&lt;p&gt;Deployed Resources &amp;gt; WEB-INF &amp;gt; views &amp;gt; home.jsp 파일을 보면 기본적으로 작성된 jsp 코드가 있다. ‘Home’ 라는 title과 ‘Hello world!’ 문구와 현재 시간을 보여주는 코드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/home jsp.png&quot; alt=&quot;home jsp file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같은 방법으로 tomcat 서버에서 실행해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/run on server.png&quot; alt=&quot;run on server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;tomcat v8.0을 선택하고 finish를 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/set tomcat.png&quot; alt=&quot;set tomcat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 창에 결과가 뜨는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/run result.png&quot; alt=&quot;run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹 브라우저를 통해 접속을 해보면 같은 결과를 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spring-project/run on browser.png&quot; alt=&quot;run on browser&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring-project-start/</link>
        <guid isPermaLink="true">http://localhost:4000/spring-project-start/</guid>
        
        <category>Spring</category>
        
        
      </item>
    
      <item>
        <title>[Mac] Spring - Eclipse, Tomcat</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-install&quot;&gt;Java Install&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eclipse를 설치하기 전에 Java JDK를 먼저 설치해야한다. JDK를 설치하면 JRE도 같이 설치된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://java.com/ko/download/mac_download.jsp&quot;&gt;JDK Download&lt;/a&gt;
에서 설치 프로그램을 다운받아서 실행한다. &lt;br /&gt;
terminal에 아래의 명령으로 설치가 잘 됐는지 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -version
java version &quot;1.8.0_111&quot;
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;eclipse-install&quot;&gt;Eclipse Install&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;Eclipse Download&lt;/a&gt; 에서 최신 버전의 Eclipse를 다운받는다. 압축을 풀고 설치를 진행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tomcat-install&quot;&gt;Tomcat Install&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt; 에서 좌측 Download에 원하는 버젼을 선택한다.&lt;br /&gt;
Core의 tar.gz을 선택하여 다운로드하고 압축을 푼다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-spring-setting/tomcat-download.png&quot; alt=&quot;Tomcat Download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아래의 과정은 압축을 풀어서 생성된 폴더의 위치를 변경하고 심볼릭 링크를 설정함으로써 tomcat에 쉽게 접근하기 위함이다. 후추에 tomcat의 버전을 변경할 일이 있으면 대체가 용이해진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1. terminal에서 아래의 명령을 실행하여 tomcat 폴더의 위치를 변경한다.(/user/local 폴더가 없다면 만들어준다.)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir -p /usr/local
$ sudo mv ~/Downloads/apache-tomcat-8.0.39 /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. Tomcat에 접근하기 쉽도록 심볼릭 링크를 설정한다.(기존의 Tomcat 폴더가 이미 존재한다면 지우고 다시 만든다.)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo rm -f /Library/Tomcat
$ sudo ln -s /usr/local/apache-tomcat-8.0.39 /Library/Tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 파일의 소유자를 바꾼다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chown &amp;lt;user&amp;gt; /Library/Tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. Tomcat/bin의 모든 script를 실행가능하도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chmod +x /Library/Tomcat/bin/*.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tomcat-install-확인&quot;&gt;Tomcat Install 확인&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /Library/Tomcat/bin/startup.sh
Using CATALINA_BASE:   /Library/Tomcat
Using CATALINA_HOME:   /Library/Tomcat
Using CATALINA_TMPDIR: /Library/Tomcat/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home
Using CLASSPATH:       /Library/Tomcat/bin/bootstrap.jar:/Library/Tomcat/bin/tomcat-juli.jar
Tomcat started.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위와 같이 startup.sh을 실행 후 웹 브라우저에 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/&lt;/code&gt;을 입력하여 아래의 결과가 나오면 정상작동 하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-spring-setting/tomcat-test.png&quot; alt=&quot;Tomcat Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;종료하는 방법은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /Library/Tomcat/bin/shutdown.sh
Using CATALINA_BASE:   /Library/Tomcat
Using CATALINA_HOME:   /Library/Tomcat
Using CATALINA_TMPDIR: /Library/Tomcat/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home
Using CLASSPATH:       /Library/Tomcat/bin/bootstrap.jar:/Library/Tomcat/bin/tomcat-juli.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;eclipse-tomcat-setting&quot;&gt;Eclipse tomcat setting&lt;/h2&gt;

&lt;p&gt;Eclipse에서 tomcat 서버를 사용하도록 설정한다.&lt;br /&gt;
Eclipse를 실행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;command + ,&lt;/code&gt; 키를 눌러서 preferences 창을 연다.&lt;br /&gt;
server -&amp;gt; Runtime Environments 로 이동하여 Add 버튼을 누르고 Apache Tomcat v8.0을 선택하고 다음 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-spring-setting/tomcat-server.png&quot; alt=&quot;Tomcat server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;tomcat이 설치된 경로를 다음과 같이 입력하고 JRE를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-spring-setting/tomcat-position.png&quot; alt=&quot;Tomcat position&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stsspring-tool-suite-eclipse-plugin-install&quot;&gt;STS(Spring Tool Suite) Eclipse Plugin Install&lt;/h2&gt;

&lt;p&gt;help -&amp;gt; Eclipse Marketplace 로 이동하여 STS를 검색한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Tool Suite(STS) for Eclipse&lt;/code&gt;를 Install 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-spring-setting/sts-install.png&quot; alt=&quot;STS Install&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 완료되면 Eclipse를 재시작 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nillk.tistory.com/&quot;&gt;http://nillk.tistory.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wolfpaulus.com/journal/mac/tomcat8/&quot;&gt;https://wolfpaulus.com/journal/mac/tomcat8/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/mac-spring-eclipse-tomcat-mysql/</link>
        <guid isPermaLink="true">http://localhost:4000/mac-spring-eclipse-tomcat-mysql/</guid>
        
        <category>Spring</category>
        
        
      </item>
    
      <item>
        <title>Python 코드를 Heroku에 올리고 특정 시간에 실행하도록 하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;python으로 학식 알림 봇을 만들었는데 서버가 필요했다. Heroku를 사용했고 특정 시간에 알림 프로세스를 규칙적으로 실행 시켜주는 방법을 적용해봤다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heroku-설치&quot;&gt;Heroku 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dashboard.heroku.com/apps&quot;&gt;Heroku&lt;/a&gt;에 가입을 하고 &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli#download-and-install&quot;&gt;Heroku Dev Center&lt;/a&gt; 에서 운영체제에 맞는 installer을 다운받아서 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;heroku에-python-code-올리기&quot;&gt;Heroku에 python code 올리기&lt;/h2&gt;

&lt;p&gt;먼저 git으로 관리되고 있는 프로젝트 폴더로 이동한다. &lt;br /&gt;
(배포에 git을 이용하기 때문에 설치가 되어있어야 한다)&lt;/p&gt;

&lt;p&gt;CLI를 이용하여 login을 하고 heroku에 앱을 생성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku login
Enter your Heroku credentials.
Email:
Password (typing will be hidden):
Authentication successful.

$ heroku create
Creating app... done, ⬢ [heroku_app_name]
https://[heroku_app_name].herokuapp.com/ | https://git.heroku.com/[heroku_app_name].git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;앱이 생성되었다는 메세지와 함께 생성된 앱의 이름(heroku_app_name)이 표시된다.
&lt;a href=&quot;https://dashboard.heroku.com/apps&quot;&gt;https://dashboard.heroku.com/apps&lt;/a&gt;에 가서 로그인하여 확인해보면 동일한 이름의 앱이 생성된 것을 확인할 수 있다. 또한 앱이 생성됨과 동시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku&lt;/code&gt; 라는 이름의 git remote가 자동으로 설정된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
heroku	https://git.heroku.com/[heroku_app_name].git (fetch)
heroku	https://git.heroku.com/[heroku_app_name].git (push)
origin	https://github.com/[...].git (fetch)
origin	https://github.com/[...].git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 명령으로 확인해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이제부터는&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;라는 명령으로 push를 하면 heroku에 배포를 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;필요한-파일&quot;&gt;필요한 파일&lt;/h2&gt;

&lt;p&gt;python을 heroku에 배포하기 위해서는 몇가지 파일들을 더 추가해줘야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;requirements.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;명령으로 현재 프로젝트에 사용되고 있는 패키지들의 리스트를 저장해서 heroku에서 배포할 때도 설치할 수 있도록 해줘야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;runtime.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'python-3.5.2' &amp;gt; runtime.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;사용하고 있는 python version을 명시해줘야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Procfile&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'clock: python 파일명.py' &amp;gt; Procfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;서버에서 실행할 명령어를 넣어준다.&lt;br /&gt;
명령어 앞에 process type을 지정하는데&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;web&lt;/li&gt;
  &lt;li&gt;worker&lt;/li&gt;
  &lt;li&gt;urgentworker&lt;/li&gt;
  &lt;li&gt;clock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등을 사용할 수 있지만 정확한 사용법은 잘 모르겠다.&lt;br /&gt;
clock을 사용한 이유는 Scheduler를 이용하여 특정 시간에 주기적으로 process를 실행시키기 위함이다.&lt;/p&gt;

&lt;p&gt;파일 작성이 완료됐으면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add [...]
git commit [...]
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;으로 원격 저장소에 push 해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;빌드팩-설치&quot;&gt;빌드팩 설치&lt;/h2&gt;

&lt;p&gt;python에 해당하는 빌드팩을 설치해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku buildpacks:set heroku/python
$ heroku create --buildpack heroku/python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;자세한 내용은
&lt;a href=&quot;https://devcenter.heroku.com/articles/buildpacks&quot;&gt;heroku buildpacks&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apscheduler-이용하기&quot;&gt;APScheduler 이용하기&lt;/h2&gt;

&lt;p&gt;python에 지정한 시간마다 특정 함수를 실행시킬 수 있도록 해주는 패키지가 존재한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install apscheduler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;새로운 패키지를 설치했으니 requirements.txt을 업데이트 해야한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;apscheduler.schedulers.blocking&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockingScheduler&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockingScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@sched.scheduled_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'interval'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timed_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This job is run every three minutes.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@sched.scheduled_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cron'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day_of_week&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mon-fri'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scheduled_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'This job is run every weekday at 5pm.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;첫 번째 지정한 데코레이터(&lt;code class=&quot;highlighter-rouge&quot;&gt;@sched.scheduled_job('interval', minutes=3)&lt;/code&gt;)는 3분 간격으로 아래의 함수를 호출한다는 의미로 &lt;code class=&quot;highlighter-rouge&quot;&gt;This job is run every three minutes.&lt;/code&gt; 이라는 메세지를 출력한다.&lt;/p&gt;

&lt;p&gt;두 번째 지정한 데코레이터(&lt;code class=&quot;highlighter-rouge&quot;&gt;@sched.scheduled_job('cron', day_of_week='mon-fri', hour=17)&lt;/code&gt;)는 평일 17시 마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;scheduled_job()&lt;/code&gt; 함수를 호출하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;This job is run every weekday at 5pm.&lt;/code&gt;이라는 메세지를 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sched.start()&lt;/code&gt;를 통해 scheduler가 동작을 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;timezone-맞추기&quot;&gt;timezone 맞추기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;원하는 시간에 프로그램이 실행되도록 하려면 timezone이 나의 시간과 일치해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SEOUL_TZ = pytz.timezone('Asia/Seoul')
today_index = datetime.now(SEOUL_TZ).weekday()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 코드는 timezone을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Asia/Seoul&lt;/code&gt;로 설정하고 오늘이 무슨 요일인지를 index로 알려주는 예시이다.(월요일 = 0)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku config:add TZ=&quot;Asia/Seoul&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;heroku 서버의 timezone도 맞춰서 설정해줘야 한다. CLI를 통해서 timezone을 지정하여 위의 명령을 실행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/categories/python&quot;&gt;https://devcenter.heroku.com/categories/python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/clock-processes-python&quot;&gt;https://devcenter.heroku.com/articles/clock-processes-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyesun03.github.io/2016/10/10/heroku/&quot;&gt;https://hyesun03.github.io/2016/10/10/heroku/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/heroku-python/</link>
        <guid isPermaLink="true">http://localhost:4000/heroku-python/</guid>
        
        <category>Python</category>
        
        <category>Heroku</category>
        
        
      </item>
    
      <item>
        <title>Line Notification with python</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Line에서 Http 호출을 이용하여 라인 메시지를 보낼 수 있는 기능을 제공한다.  Command line 과 python 을 이용하여 Line Notify를 이용하는 방법에 대해서 알아보았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;access-token-generate&quot;&gt;Access Token Generate&lt;/h2&gt;

&lt;p&gt;먼저 &lt;a href=&quot;https://notify-bot.line.me/my/&quot;&gt;Line Notify&lt;/a&gt;에 로그인을 한 후,&lt;/p&gt;

&lt;p&gt;하단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Generate token&lt;/code&gt; 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/line-notify/line-notify.png&quot; alt=&quot;line notify&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 빈 칸에는 Line 대화창에서 notification을 제공하는 주체의 이름을 지정한다.&lt;/p&gt;

&lt;p&gt;두번째 빈 칸에는 notifications을 보낼 대화창을 선택한다. 그룹이 존재하면 해당 그룹을 선택할 수 있고, 자신에게 보내고 싶을 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;1-on-1 chat with LINE Notify&lt;/code&gt;를 선택하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/line-notify/line-notify-group.png&quot; alt=&quot;line notify group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지정한 이름은 메시지를 받을 때 아래와 같이 보여진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/line-notify/notify-name.png&quot; alt=&quot;line notify name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Generate toekn&lt;/code&gt; 버튼을 누르면 token이 생성된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Close&lt;/code&gt; 버튼을 누르면 token 값을 다시 볼 수 없으므로 token 값을 복사하여 따로 저장해두도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/line-notify/line-notify-token.png&quot; alt=&quot;line notify token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;line-notify-with-command-line&quot;&gt;Line Notify with Command line&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST -H 'Authorization: Bearer &amp;lt;access_token&amp;gt;' -F 'message=foobar' https://notify-api.line.me/api/notify
{&quot;status&quot;:200,&quot;message&quot;:&quot;ok&quot;}   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;access_token&amp;gt;&lt;/code&gt; 자리에 조금 전에 생성한 token 값을 넣어준다.&lt;/p&gt;

&lt;p&gt;‘message=foobar’ 부분에 notify 하고싶은 내용을 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;line-notification-with-python&quot;&gt;Line Notification with python&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'error: wrong arguments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'usage: python line-notify.py [ACCESS_TOKEN] [MESSAGE]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://notify-api.line.me/api/notify'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MESSAGE_FIELD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'message'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LINE_HEADERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Authorization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bearer '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACCESS_TOKEN&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LINE_HEADERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE_FIELD&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Response HTTP Status Code: {status_code}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'HTTP Request failed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use&quot;&gt;How to use&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cjh5414/line-notify.git&quot;&gt;https://github.com/cjh5414/line-notify.git&lt;/a&gt; 을 clone 한다.&lt;/p&gt;

&lt;p&gt;command line에 아래의 형태로 실행한다.&lt;/p&gt;

&lt;p&gt;[ACCESS_TOKEN]에는 저장해둔 token 값을, [MESSAGE]에는 원하는 메세지를 ‘ ‘를 붙여서 넣어주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 line-notify.py [ACCESS_TOKEN] [MESSAGE]  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/line-notify/notify-result.png&quot; alt=&quot;line notify result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://notify-bot.line.me/doc/en/&quot;&gt;LINE Notify API Document&lt;/a&gt;를 보면 더 자세한 내용을 확인 할 수 있다.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/line-notification-with-python/</link>
        <guid isPermaLink="true">http://localhost:4000/line-notification-with-python/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Python decorator에 @wraps를 사용해야 하는 이유</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;python decorator를 구현하기 위해 구글링을 해보는 중에 decorator함수에 @wraps를 사용하는 것을 자주 볼 수 있었다. @wraps를 사용 하는 것과 사용 하지 않는 것의 결과는 차이가 없었는데 왜 사용하는지 이유가 궁금해서 찾아보았다. 결론부터 말하자면 decorator를 이용하면 debugging이 어려워 지는데 @wraps를 사용하면 그 문제를 해결할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러 함수들의 시작, 종료에 공통적으로 사용되는 코드가 있는 경우 decorator를 만들어서 사용하면 매우 유용하다. (&lt;a href=&quot;https://cjh5414.github.io/python-decorator/&quot;&gt;python decorator 사용법&lt;/a&gt;)&lt;br /&gt;
하지만 decorator를 이용한 코드는 디버깅하기 어려운 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wraps를-사용하지-않는-경우&quot;&gt;@wraps를 사용하지 않는 경우&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;without_wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__wrapper&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@without_wraps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_func_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Here is my_func_a doc string text.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 아래는 @wraps가 없는 decorator를 이용한 함수의 결과이다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__wrapper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 결과를 보면 알 수 있듯이 my_func_a()라는 함수의 name과 doc를 출력해보면 원하는 결과를 얻지 못하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;@without_wraps decorator를 지정하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;__wrapper()&lt;/code&gt;라는 함수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;my_func_a()&lt;/code&gt;를 감싸주기 때문에 name과 doc이 &lt;code class=&quot;highlighter-rouge&quot;&gt;__wrapper&lt;/code&gt;에 맞게 출력이 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wraps를-사용하는-경우&quot;&gt;@wraps를 사용하는 경우&lt;/h3&gt;

&lt;p&gt;python에서는 이런 문제를 다루기 위해 @wraps라는 것을 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;without_wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__wrapper&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@with_wraps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_func_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Here is my_func_b doc string text.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 아래는 @wraps가 있는 decorator를 이용한 함수의 결과이다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Here&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_func_b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@wraps를 지정하여 decorator를 구현하면 문제없이 해당 함수를 디버깅할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://artemrudenko.wordpress.com/2013/04/15/python-why-you-need-to-use-wraps-with-decorators/&quot;&gt;https://artemrudenko.wordpress.com/2013/04/15/python-why-you-need-to-use-wraps-with-decorators/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/wraps-with-decorator/</link>
        <guid isPermaLink="true">http://localhost:4000/wraps-with-decorator/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Python decorator 만들기 - decorator가 지정될 함수의 self 이용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TDD, Django 기반의 프로젝트를 진행하면서 Functional test 시작 부분에 자주 사용되는 코드를 decorator를 이용하여 구현해보았다. 기본적인 decorator를 구현하는 방법에 대해서 먼저 알아보았고 decorator 함수 내에서 decorator가 지정될 함수의 self를 이용하여 구현하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-decorator-&quot;&gt;python decorator (‘@’)&lt;/h2&gt;

&lt;p&gt;python에 decorator라는 기능이 있다. 함수를 꾸며준다는 의미로 함수 정의 부분 위에 ‘@’기호로 시작하는 문장을 추가하여 사용한다. 함수의 앞뒤에 추가적으로 넣고 싶은 코드를 한 문장으로 지정하여 쉽게 재사용할 수 있도록 해주는 편리한 기능이다. 여러 함수들의 시작, 종료에 공통적으로 사용되는 코드가 있는 경우 decorator를 만들어서 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;함수-기반의-decorator&quot;&gt;함수 기반의 decorator&lt;/h2&gt;

&lt;p&gt;아래와 같은 함수 두개가 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hi_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 시작'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 끝'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 시작'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 끝'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;각각 함수를 호출해서 결과를 확인해보면 아래와 같은 메세지가 출력된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;함수 시작
hi
함수 끝
함수 시작
hello
함수 끝
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;함수를-이용한-decorator&quot;&gt;함수를 이용한 decorator&lt;/h3&gt;

&lt;p&gt;중복되는 부분인 &lt;code class=&quot;highlighter-rouge&quot;&gt;print('함수 시작')&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;print('함수 끝')&lt;/code&gt;를 decorator 함수로 만들어서 사용해 보려고 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_exam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 시작'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 끝'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@decorator_exam&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hi_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@decorator_exam&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;두 함수를 호출해서 확인해보면 decorator를 적용하기 전의 결과와 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;class를-이용한-decorator&quot;&gt;class를 이용한 decorator&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecoratorExam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 시작'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'함수 끝'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;decorator-지정-될-함수의-self-이용하기&quot;&gt;decorator 지정 될 함수의 self 이용하기&lt;/h3&gt;

&lt;p&gt;게시판의 기능 테스트에서 시작 전에 매번 수행되는 로그인 부분을 decorator 함수를 만들어서 사용한 부분이다.&lt;br /&gt;
decorator가 지정된 함수의 self를 통해서 로그인을 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login_test_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'browser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;live_server_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login_button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id_password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'kboard123'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_element_by_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'btn-primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login_test_user_with_browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;login_test_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_impl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;게시글이 삭제되는지 테스트하는 코드에 decorator를 지정해서 이용한다.&lt;br /&gt;
호출되는 decorator 함수는 DeletePostTest 객체의 self를 통해서 로그인을 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeletePostTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionalTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@login_test_user_with_browser&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_delete_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 지훈이는 게시글을 삭제하는 기능이 제대로 동작하는지 확인하기 위해 기본 게시판으로 이동한다.&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move_to_default_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;자주 사용되는 로그인 기능을 매번 작성하지 않고 decorator를 이용하여서 가독성과 재사용성을 높일 수 있었다.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/python-decorator/</link>
        <guid isPermaLink="true">http://localhost:4000/python-decorator/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>Django에서 Gunicorn, Nginx 이용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx-install&quot;&gt;Nginx Install&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;제대로 동작하는지 확인하기 위해 nginx를 실행해본다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;사이트 IP 주소에 접속해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome to nginx!&lt;/code&gt; 페이지가 보이면 정상 동작하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx-setting&quot;&gt;Nginx Setting&lt;/h3&gt;

&lt;p&gt;Django를 이용해서 서버에 요청을 보낼 수 있도록 Nginx 설정 파일을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/etc/nginx/sites-available/사이트주소&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name 서버_이름;

    location / {
        proxy_pass http://localhost:8000;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 설정은 로컬 포트 8000으로 들어오는 모든 요청을 Django로 보내서 응답하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ln -s /etc/nginx/sites-available/사이트주소 /etc/nginx/sites-enable/사이트주소
$ ls -l /etc/nginx/sites-enabled
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;symlink를 이용하여 사이트를 쉽게 시작하고 종료할 수 있도록 설정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo rm /etc/nginx/sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;기본으로 설정된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Welcome to Nginx&lt;/code&gt; 은 제거한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run&quot;&gt;Run&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service nginx reload
$ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;사이트 IP 주소에 접속해서 원하는 페이지가 보이는지 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gunicorn-install&quot;&gt;Gunicorn Install&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install gunicorn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-file-setting&quot;&gt;Static file setting&lt;/h3&gt;

&lt;p&gt;Django 개발 서버는 정적 파일을 알아서 제공해주지만 Gunicorn을 이용하면 해주지 않기 때문에 Nginx가 정적 파일을 제공할 수 있도록 하는 설정이 필요하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;먼저 collectstatic으로 정적 파일들을 Nginx가 찾을 수 있는 폴더에 복사한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/etc/nginx/sites-available/사이트주소&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80;
    server_name 서버_이름;

    location /static {
        alias static 파일 경로;
    }

    location / {
        proxy_pass http://localhost:8000;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;설정 파일을 수정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-1&quot;&gt;Run&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service nginx reload
$ gunicorn 프로젝트명.wsgi:application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;사이트에 접속해서 페이지를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;p&gt;클린 코드를 위한 테스트 주도 개발 - 해리 J.W.퍼시벌 지음 / 김완섭 옮김&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/nginx/</link>
        <guid isPermaLink="true">http://localhost:4000/nginx/</guid>
        
        <category>Nginx</category>
        
        
      </item>
    
      <item>
        <title>Django test attachment using SimpleUploadedFile</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;django 에서 첨부파일 기능의 테스트 코드를 작성하는데 모델의 객체를 생성하는 과정에서 test파일을 이용하는 방법을 몰라서 어려움을 겪었다. 이 포스팅에서는 FileField을 필드로 가지고 있는 모델을 테스트 하기 위해 upload된 상태의 test파일을 생성하는 방법에 대해서 다룬다. 첨부파일 기능은 modelform을 이용하여 구현했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;modelspy&quot;&gt;models.py&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;formspy&quot;&gt;forms.py&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AttachmentForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attachment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'attachment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewspy&quot;&gt;views.py&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attachment_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttachmentForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachment_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachment_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attachment_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttachmentForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;test-code&quot;&gt;test code&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.files.uploadedfile&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleUploadedFile&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_can_save_a_attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_uploaded_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleUploadedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'saved_file.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test_file/test.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;saved_attachments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_attachments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SimpleUploadedFile을 이용해서 uploadedfile 객체를 생성하고 FileField 필드에 넣어준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saved_file.txt&lt;/code&gt; 은 upload될 파일의 이름을 입력한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_file/test.txt&lt;/code&gt; 은 테스트 하고자 하는 파일의 상대경로를 입력한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django-attachment-test/</link>
        <guid isPermaLink="true">http://localhost:4000/django-attachment-test/</guid>
        
        <category>Django</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>Django model form is_valid() saves instance automatically</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;modelform의 form.is_valid() 메서드는 내부적으로 여러가지 일을 하는데 그 중에 하나는 Model Form의 데이터를 폼 인스턴스로 알아서 저장하는 것이다. 이 때 is_valid() 가 True인지 False인지 와는 관계가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;views.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 2.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 3.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Post를 수정하는 view이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;2.&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;3.&lt;/code&gt;에서 기존의 post의 title 값을 기대하고 작업을 했는데 실제로는 reqeust.POST[‘title’]의 값이 출력된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;1.&lt;/code&gt; 에서는 수정하기 전의 title 값을 출력한다. 그 이유는 위에서 언급했듯이 is_valid() 메서드에서 post 인스턴스의 값을 request.POST에 들어있는 값으로 자동으로 설정하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'origin title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'edited title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;u'origin title'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;u'edited title'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# DB로 부터 새로운 instance를 가져온다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# DB의 title 값이 그대로이다.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;u'origin title'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# DB에 form데이터를 저장한다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 다시 DB로 부터 새로운 instance를 가져온다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# DB의 title 값이 변경되어있다.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;u'edited title'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;python shell로 간단히 테스트해 본 결과이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;is_valid() 를 호출하면 post instance에 form의 값들이 저장되지만 DB에 저장되는 것은 아니다. (post2으로 확인) save()함수를 호출하면 DB에 저장된다. (post3으로 확인)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;is_valid() 에서 유효성 검사의 성공 여부와 관계없이 form 데이터가 항상 instance에 저장되는 것을 상기하면서 활용하면 좋을 것 같다. 위의 예시 코드로 예를 들어보면, 유효성 검사에 실패했을 경우 사용자가 입력한 form의 데이터(post)와 실제 DB의 모델 instance(post3) 의 데이터를 따로 비교, 저장 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;p&gt;Two Scoops of Django - 대니얼 로이 그린팰드, 오드리 로이 그린펠드 지음 / 김승진 옮김&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/modelform-isinvalid-instance-save/</link>
        <guid isPermaLink="true">http://localhost:4000/modelform-isinvalid-instance-save/</guid>
        
        <category>Django</category>
        
        
      </item>
    
      <item>
        <title>Django file upload 기능 구현하기 - Model Form 이용</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;djanog에서 file upload 기능을 구현하는데 modelform을 이용하였더니 편리하게 구현할 수 있었다. 그 과정에 대한 포스팅이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;media-setting&quot;&gt;MEDIA Setting&lt;/h2&gt;

&lt;p&gt;upload file은 MEDIA_ROOT에 저장이 되고, 요청할 때는 MEDIA_URL을 이용한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;settings.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MEDIA_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/media/'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'media'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;개발 서버에서 uploaded file을 serve 할 수 있도록 아래의 설정이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;urls.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;

&lt;p&gt;title과 upload할 file에 대한 정보를 갖는 model.&lt;br /&gt;
file은 존재하지 않는 경우도 있으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;null=True&lt;/code&gt;로 설정해준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UploadFileModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modelform&quot;&gt;ModelForm&lt;/h2&gt;

&lt;p&gt;UploadFileModel에 대한 modelform을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;forms.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFileModel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UploadFileForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFileModel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt; 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.fields['file'].required = False&lt;/code&gt; 설정을 통해 file 값이 없더라도 view에서 유효성 검사에서 오류를 발생시키지 않도록 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;

&lt;p&gt;file upload를 하기 위해서는 form에 &lt;code class=&quot;highlighter-rouge&quot;&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;을 추가해줘야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;novalidate&lt;/code&gt;는 form 제출 시에 유효성 검사를 하지 않게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;upload.html&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enctype=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    { csrf_token }
    { form.as_p }
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Upload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;upload된 파일은 file의 url을 href로 지정하고 download를 넣어주면 다운 받을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;uploaded.html&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_uploaded_file&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ uploadFileModel.file.url }&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{ uploadFileModel.file.name }&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;upload-view&quot;&gt;Upload View&lt;/h2&gt;

&lt;p&gt;UploadFileForm 객체를 생성하여 rendering 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt;으로 넘겨주면 html에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;form.as_p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;을 통해 file 필드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;file&quot; name=&quot;&quot; /&amp;gt;&lt;/code&gt;으로 생성된다.&lt;br /&gt;
POST로 form이 제출되면 upload 파일의 정보는 request.FILES을 통해 전달되고 form 유효성 검사 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;form.save()&lt;/code&gt;을 하면 settings에서 설정한 &lt;code class=&quot;highlighter-rouge&quot;&gt;MEDIA_ROOT&lt;/code&gt; 위치에 파일이 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;views.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFileForm&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upload_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFileForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/success/url/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFileForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'upload.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'form'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;현재는 사용중인 Model에 file 필드만 추가하여서 구현하고 있지만 file을 다른 form으로 분류하여서 구현하는게 더 좋다고 한다. 이 점에 대해서는 더 자세히 공부한 후에 포스팅할 예정이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/el/1.10/topics/http/file-uploads/&quot;&gt;https://docs.djangoproject.com/el/1.10/topics/http/file-uploads/&lt;/a&gt;
&lt;a href=&quot;https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html&quot;&gt;https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django-file-upload/</link>
        <guid isPermaLink="true">http://localhost:4000/django-file-upload/</guid>
        
        <category>Django</category>
        
        
      </item>
    
      <item>
        <title>form 유효성 검사 비활성화 - novalidate</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;form에 &lt;code class=&quot;highlighter-rouge&quot;&gt;input type=&quot;file&quot;&lt;/code&gt;을 이용하여 file upload 기능을 구현하는 중에 아래와 같은 문제가 발생하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/novalidate/novalidate.png&quot; alt=&quot;novalidate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일을 추가하지 않으면 경고창이 뜨고 form이 제출되지 않아서 다음 단계로 진행되지가 않는다.&lt;/p&gt;

&lt;p&gt;form 제출 시에 유효성 검사를 하는데 통과하지 못하면 경고창을 띄운다. 유효성 검사를 하지않게 하는 방법은 form에 novalidate 속성을 추가하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;novalidate&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;file 누락 유효성 검사 이외에도 입력란이 비어 있는지 등의 다른 유효성 검사들도 이 방법으로 검사하지 않을 수 있다.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/novalidate/</link>
        <guid isPermaLink="true">http://localhost:4000/novalidate/</guid>
        
        <category>HTML</category>
        
        
      </item>
    
      <item>
        <title>Django abstract model test</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러가지 모델에 공통적으로 필요한 created_time 필드를 가지고 있는 TimeStampedModel 추상 모델을 상속 받아서 모델들을 구현하고 있다. (TimeStampedModel abstract model에 관한 내용은 &lt;a href=&quot;https://cjh5414.github.io/django-TimeStampedModel/&quot;&gt;여기&lt;/a&gt;를 참고하면 된다.)&lt;br /&gt;
각각의 모델들에 created_time이 잘 저장되는지 확인하기 위해 테스트 코드를 작성하는데 새로운 모델을 추가할 때마다 테스트 코드를 추가하면 코드의 중복이 발생한다. 이를 해결하기 위해서는 추상 모델인 TimeStampedMode 에서 한 번만 테스트를 작성하면 된다. 하지만 abstract model을 테스트 하기 위해서는 DB에 테이블이 생성되지 않기 때문에 일반적인 model 테스트와는 다르게 추가적인 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;timestampedmodel&quot;&gt;TimeStampedModel&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;core/models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;created_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-model-test&quot;&gt;Abstract model test&lt;/h3&gt;

&lt;p&gt;우선 abstract model에 대한 테스트가 정말 안되는지 확인해봤다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;core/tests/test_models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;core.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeStampedModel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestTimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_created_time_after_create_TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;time_after_create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertGreater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_after_create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;creaed_time이 제대로 저장 됐는지 확인하기 위해 TimeStampedModel의 객체를 생성하고 저장한 후 시간을 기록한다. 기록한 시간과 created_time의 오차가 1초 이내 인지를 테스트하는 코드이다.&lt;/p&gt;

&lt;p&gt;테스트를 돌려보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;AttributeError: 'NoneType' object has no attribute 'attname'&lt;/code&gt;라는 에러가 발생한다. 에러 메세지의 정확한 의미는 잘 모르겠지만 예상했던대로 save() 부분에서 에러가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testmodelinheritedtimestampedmodel&quot;&gt;TestModelInheritedTimeStampedModel&lt;/h3&gt;

&lt;p&gt;실제로 모델을 사용하는 것과 같이 TimeStampedModel을 상속 받은 test model을 생성하여 테스트 하면 해결이 된다.&lt;/p&gt;

&lt;p&gt;test code에 TimeStampedModel을 상속 받은 TestModelInheritedTimeStampedModel 테스트 클래스를 생성하고 테스트에서 생성하는 객체의 모델을 TestModelInheritedTimeStampedModel으로 바꿔준다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;core/tests/test_models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestModelInheritedTimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app_label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'core'&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestTimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_created_time_after_create_TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;test_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestModelInheritedTimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;test_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;app_label&quot;&gt;app_label&lt;/h3&gt;

&lt;p&gt;app_label = ‘app_name’을 지정해주는 이유는 django는 기본적으로 model을 생성할 때 class가 존재하는 바로 위의 파일(여기서는 tests)을 앱으로 판단하여 거기에 모델을 생성한다. 하지만 test라는 앱은 존재하지 않아서 INSTALLED_APPS에서 찾을 수가 없기 때문에 아래와 같은 에러가 발생한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RuntimeError: Model class tests.test_models.TestModelInheritedTimeStampedModel doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Meta:&lt;/code&gt;안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;app_label&lt;/code&gt;을 앱 이름으로 지정해줘야 한다.(여기서는 core)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kurup.org/blog/2014/07/21/django-test-models&quot;&gt;https://www.kurup.org/blog/2014/07/21/django-test-models&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django-abstract-model-test/</link>
        <guid isPermaLink="true">http://localhost:4000/django-abstract-model-test/</guid>
        
        <category>Django</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>Django Key Error request.POST.get() 사용 문제</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kboard 프로젝트에서 게시글 수정하는 기능을 구현하는 과정에서 발생한 문제이다. 테스트 코드를 돌려보던 중에 Key Error 에러가 발생해서 views에 request.POST.get()을 이용하였더니 문제가 해결됐다. 하지만 Key Error가 발생한다고 해서 request.POST.get()을 이용하여 문제를 바로 해결하는 것은 좋지 않은 선택이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;게시글-수정에-대한-views와-test-code&quot;&gt;게시글 수정에 대한 views와 test code&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;views.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;unittest&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_POST_redirects_to_post_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Edited title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertRedirects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;

&lt;p&gt;테스트를 동작 시켰을 때 발생한 오류이다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;raise MultiValueDictKeyError(repr(key))
django.utils.datastructures.MultiValueDictKeyError: &quot;'title'&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;원인&quot;&gt;원인&lt;/h3&gt;

&lt;p&gt;구글링을 해보니 keyerror가 발생할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST['key']&lt;/code&gt; 대신에 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST.get('key', '')&lt;/code&gt; 을 사용하면 된다고 나와있었다.&lt;/p&gt;

&lt;p&gt;views를 아래와 같이 변경하였더니 테스트를 통과했다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;views.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;두 가지의 차이점이 궁금해서 더 찾아봤는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;request.POST&lt;/code&gt; 는 request의 POST 값들을 dictionary 형태로 반환해 준다. python 문법에 의해 반환된 dict은 &lt;code class=&quot;highlighter-rouge&quot;&gt;['key']&lt;/code&gt;을 이용하면 ‘key’에 해당하는 값을 리턴해 주는데 존재하지 않으면 KeyError를 발생시킨다. dict에서 특정 key의 값을 얻는 다른 방법으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;.get('key')&lt;/code&gt; 을 이용하면 존재하지 않은 key일 경우 None을 반환하는 차이점이 있고, 추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;.get('key', 'defaultvalue')&lt;/code&gt; 와 같이 key 값이 없을 경우 default 값을 설정해 줄 수 있다.&lt;/p&gt;

&lt;p&gt;위의 코드에서 error의 원인과 테스트를 통과할 수 있었던 이유를 살펴보면 views에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 값을 원했는데 test코드에서 key 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;edit&lt;/code&gt;로 잘못 지정해서 views에서 원하는 값이 없기 때문에 keyerror가 발생한 것이고,
.get()을 이용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 값이 존재하지 않더라도 기본 값으로 ‘‘이 설정됐기 때문에 테스트를 통과한 것이다.&lt;/p&gt;

&lt;p&gt;하지만 이 경우 테스트의 의도와는 맞지 않게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 의 값이 제대로 들어갔는지를 확인하는 테스트가 아니긴 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 에 내가 원하던 ‘Edited title’값이 아닌  ‘‘값이 들어간 상태로 테스트가 통과한 것이다. 여기서는 이상이 없었지만 분명히 문제가 있는 코드이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;key Error가 발생한다고 해서 무조건 .get()을 사용하여 해결하기 보다는 원인을 분석하여 적절한 해결방법을 찾아보는 것이 좋다고 생각된다.&lt;/p&gt;

&lt;p&gt;위의 경우에는 POST의 key에서 발생한 오타를 수정해주면 .get()을 사용하지 않더라고 테스트가 잘 통과한다. ( 결론은 오타 문제였다.. ) 조금 더 자세히 생각해보면 이 경우에는 .get을 사용하면 안되는 것이다. .get()을 사용하고 테스트가 아닌 실제 template 태그에서 key값이 잘못됐다고 가정하면, 사용자가 수정한 값은 무시되고 항상 views에서 .get()에서 지정한 default 값으로 반영이 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-request-get-and-request-GET-get-in-django&quot;&gt;https://www.quora.com/What-is-the-difference-between-request-get-and-request-GET-get-in-django&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django-keyerror/</link>
        <guid isPermaLink="true">http://localhost:4000/django-keyerror/</guid>
        
        <category>Django</category>
        
        <category>Test</category>
        
        
      </item>
    
      <item>
        <title>Django TimeStampedModel 상속 이용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;django에서 models에 데이터 생성 시간, 업데이트 시간을 기록하기 위해 create_time, modified_time 필드를 설정해 주는 경우가 자주 있다. 이 필드들은 많은 모델들에서 사용되는 필드이므로 TimeStampedModel에 한 번만 필드를 지정해놓고 상속을 받아서 사용하는 것이 좋다. 일일이 두 가지 필드를 해당 모델들에 추가할 필요가 없고, 추가하지 않아서 발생하는 문제들을 방지할 수 있는 장점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;추상화-기초-클래스&quot;&gt;추상화 기초 클래스&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;core/models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;created_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modified_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;auto_now_add=True&lt;/em&gt;&lt;br /&gt;
데이터가 생성되어 처음 저장 될 때 시간이 기록된다는 의미이다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;auto_now=True&lt;/em&gt;&lt;br /&gt;
데이터가 수정될 때마다 시간이 업데이트 된다는 의미이다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;class Meta:  abstract = True&lt;/em&gt;&lt;br /&gt;
해당 클래스를 추사화 기초 클래스로 선언한다는 의미로 장고에서 마이그레이션을 실행할 때 timestampedmodel에 대한 테이블이 생성되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;상속받은-클래스-사용-예시&quot;&gt;상속받은 클래스 사용 예시&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;board/models.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;core.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeStampedModel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeStampedModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Comment 모델은 created_time, modified_time 필드를 따로 지정하지 않아도 TimeStampedModel을 상속 받았기 때문에 데이터가 생성될 때, 수정될 때의 시간이 기록된다.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django-TimeStampedModel/</link>
        <guid isPermaLink="true">http://localhost:4000/django-TimeStampedModel/</guid>
        
        <category>Django</category>
        
        
      </item>
    
  </channel>
</rss>
