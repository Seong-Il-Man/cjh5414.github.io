<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jihun's blog</title>
    <description>A free Jekyll theme for download</description>
    <link>http://nandomoreira.me/</link>
    <atom:link href="http://nandomoreira.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 27 Sep 2016 16:06:56 +0900</pubDate>
    <lastBuildDate>Tue, 27 Sep 2016 16:06:56 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Upstart 보다는 Systemd</title>
        <description>&lt;p&gt;얼마 전 &lt;a href=&quot;https://cjh5414.github.io/2016/09/22/upstart.html&quot;&gt;upstart에 대한 포스팅&lt;/a&gt;을 한 적이 있는데 upstart와는 비교가 되지 않고 사람들이 많이 사용하고 있는 &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/systemd/&quot;&gt;Systemd&lt;/a&gt;에 대해서 알아보았다.&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/systemd/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/systemd/</guid>
        
        
      </item>
    
      <item>
        <title>Upstart를 이용하여 부팅 시 실행되는 프로세스 설정하기</title>
        <description>&lt;p&gt;Ubuntu에서 Upstart를 이용하는 방법을 예제를 통해 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;작업 폴더 위치&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ pwd

/home/ubuntu/upstart_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;upstart--&quot;&gt;Upstart 스크립트 작성&lt;/h2&gt;

&lt;p&gt;스크립트는 /etc/init에 만들고 확장자는 .conf로 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;/etc/init/upstart_test_script.conf&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;description &quot;upstart test&quot;

start on startup
stop on shutdown

respawn

setuid ubuntu
chdir /home/ubuntu/upstart_test

exec echo &quot;Hello World!&quot; &amp;gt; hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;start on net-device-up : 부팅 되면 실행 ( start on net-device-up : 인터넷에 연결 되면 실행 )&lt;/li&gt;
  &lt;li&gt;respawn : 프로세스가 다운되면 자동으로 재시작&lt;/li&gt;
  &lt;li&gt;chdir : 현재 디렉터리&lt;/li&gt;
  &lt;li&gt;exec : 실제 프로세스 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;스크립트 문법 체크&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ init-checkconf /etc/init/upstart_test_script.conf

File /etc/init/upstart_test_script.conf: syntax ok
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;스크립트 문법 오류가 있는지 검사한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;start---&quot;&gt;start 명령을 이용해서 확인&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo start upstart_test_script

upstart_test_script start/running, process 1825

$ ls /home/ubuntu/upstart_test
hello.txt

$ cat /home/ubuntu/upstart_test/hello.txt
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello.txt파일이 만들어진 것을 확인할 수 있다.
start명령을 통하지 않더라도 start on 으로 설정한 방법에 따라 알아서 실행될 것이다.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/upstart/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/upstart/</guid>
        
        
      </item>
    
      <item>
        <title>Python import</title>
        <description>&lt;h2 id=&quot;import&quot;&gt;import&lt;/h2&gt;
&lt;p&gt;import는 ‘수입하다’라는 뜻으로 python에서는 다른 모듈 내의 코드에 접근을 가능하게 해주는 역할을 한다. import를 사용하는 벙법에는 여러가지 형태가 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import module
from module import submodule
from . import submodule
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;예제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;파일 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;import_test/
	hello.py
	calc/
		plus_and_minus.py
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;hello.py&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;hello_str = 'Hello!'
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;plus_and_minus.py&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;def plus(a, b):
	return a+b

def minus(a, b):
	return a-b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-shell-----import-&quot;&gt;python shell을 실행시켜서 몇 가지 형태의 import문을 확인해본다.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd import_test
$ python
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import hello
&amp;gt;&amp;gt;&amp;gt; hello.hello_str
'Hello!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from hello import hello_str
&amp;gt;&amp;gt;&amp;gt; hello_str
'Hello!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from calc import plus_and_minus
&amp;gt;&amp;gt;&amp;gt; plus_and_minus.plus(1,2)
3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from calc.plus_and_minus import plus
&amp;gt;&amp;gt;&amp;gt; plus(1,2)
3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;as&quot;&gt;별칭 사용  - as&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import calc.plus_and_minus as pm
&amp;gt;&amp;gt;&amp;gt; pm.plus(1,2)
3
&amp;gt;&amp;gt;&amp;gt; pm.minus(2,1)
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;주의사항&lt;/h2&gt;

&lt;h3 id=&quot;pep8-------&quot;&gt;PEP8은 다음과 같은 순서로 그룹을 지을 것을 제안한다.&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;표준 라이브러리 임포트&lt;/li&gt;
  &lt;li&gt;연관 외부 라이버르리 임포트&lt;/li&gt;
  &lt;li&gt;로컬 애플리케이션 또는 라이브러리에 한정된 임포트&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;import---&quot;&gt;import * 는 피하자.&lt;/h3&gt;
&lt;p&gt;코드가 복잡해지고 어떤 모듈이 어떤 함수, 변수를 불러오는지 파악하기 힘들어져서 가독성이 떨어진다.&lt;br /&gt;
또한, import한 다른 파이썬 모듈이 현재 작업하는 모듈의 것을 덮어버리는 문제가 발생 할 수 있기 때문에 위험하다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;명시적 성격의 상대 임포트를 이용하자.&lt;/h3&gt;
&lt;p&gt;명시적 성격의 상대 임포트(explicit relative import)를 통해 모듈의 패키지를 하드 코딩하거나 구조적으로 종속된 모듈을 어렵게 분리해야 하는 경우들을 피해 갈 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;참고자료&lt;/h2&gt;
&lt;p&gt;Two Scoops of Django - 대니얼 로이 그린펠드, 오드리 로이 그린펠드&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/python-import/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/python-import/</guid>
        
        
      </item>
    
      <item>
        <title>진행 중인 프로젝트에 travis-ci 붙이기</title>
        <description>&lt;p&gt;현재 ‘클린 코드를 위한 테스트 주도 개발’이라는 책을 보면서 To-Do list 프로젝트를 따라해보고 있다.
git으로 관리하는 이 프로젝트에 travis-ci를 붙여보고자 한다.
&lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot;&gt;https://docs.travis-ci.com/user/getting-started/&lt;/a&gt; 여기에 가면 사용법이 나와있다.&lt;/p&gt;

&lt;h2 id=&quot;travisyml-&quot;&gt;.travis.yml 추가&lt;/h2&gt;

&lt;p&gt;사용되는 언어, 버전, 스크립트 등의 내용을 작성한다.&lt;br /&gt;
python은 &lt;a href=&quot;https://docs.travis-ci.com/user/languages/python/&quot;&gt;https://docs.travis-ci.com/user/languages/python/&lt;/a&gt; 를 참고하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: python
python:
  - &quot;3.5&quot;
# command to install dependencies
install: &quot;sudo pip install -r requirements.txt&quot;
# command to run tests
script: python manage.py test lists/
sudo: required
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;requirementstxt-&quot;&gt;requirements.txt 만들기&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;travis-ci-&quot;&gt;해당 프로젝트 travis-ci 설정&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;https://travis-ci.org/profile&lt;/a&gt; 에 접속하여 해당 프로젝트에 체크표시를 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/project-travis.png&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;commit&quot;&gt;변경사항 commit&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git add .travis.yml
git add requirements.txt
git commit -m &quot;add .travis.yml and requirements.txt&quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;확인&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;https://travis-ci.org/&lt;/a&gt; 에 접속하여 결과를 확인한다.&lt;br /&gt;
git push를 하면 travis-ci가 알아서 테스트를 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/project-travis-result.png&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결과는 메일로도 발송된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/project-travis-email.png&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 19 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/project-travis-ci/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/project-travis-ci/</guid>
        
        
      </item>
    
      <item>
        <title>PEP8 tools - pep8, flake8, autopep8</title>
        <description>&lt;p&gt;PEP8을 잘 지킬 수 있도록 도와주는 도구들이 많이 있다. 그 중에서 pep8, flake8, autopep8에 대해서 알아본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PEP8이 적용되지 않은 예제코드&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;import sys

def add(x, y):
	return x +y

print(add(1,2))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;pep8&quot;&gt;pep8&lt;/h2&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pip install pep8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;using&quot;&gt;Using&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pep8 test.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래와 같은 결과가 출력된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test.py:3:1: E302 expected 2 blank lines, found 1
test.py:4:1: W191 indentation contains tabs
test.py:4:12: E225 missing whitespace around operator
test.py:6:12: E231 missing whitespace after ','
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3라인에 2라인을 띄어써라.&lt;br /&gt;
tab을 사용하지 마라.&lt;br /&gt;
연산자 주변, ‘,’뒤에 띄어쓰기를 해라.&lt;br /&gt;
등의 결과를 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;flake8&quot;&gt;flake8&lt;/h2&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pip install flake8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;using-1&quot;&gt;Using&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;flake8 test.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;결과는 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test.py:1:1: F401 'sys' imported but unused
test.py:3:1: E302 expected 2 blank lines, found 1
test.py:4:1: W191 indentation contains tabs
test.py:4:12: E225 missing whitespace around operator
test.py:6:12: E231 missing whitespace after ','
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pep8을 사용했을 때와 마찬가지로 pep8에 위반되는 사항들을 출력해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;select 옵션으로 특정한 warning, error 메세지만 확인할 수도 있다.
    &lt;pre&gt;&lt;code&gt;flake8 --select E302 test.py
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;test.py:1:1: F401 'sys' imported but unused
test.py:3:1: E302 expected 2 blank lines, found 1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;ignore 옵션으로는 특정한 warning, error 메세지를 무시할 수도 있다.
    &lt;pre&gt;&lt;code&gt;flake8 --ignore E302 test.py
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;test.py:1:1: F401 'sys' imported but unused
test.py:4:1: W191 indentation contains tabs
test.py:4:12: E225 missing whitespace around operator
test.py:6:12: E231 missing whitespace after ','
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;~/.config/flake8&lt;/code&gt;의 환경설정 파일을 통해 79라인 규칙을 100라인으로 늘리는 등의 설정을 변경할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;autopep8&quot;&gt;autopep8&lt;/h2&gt;

&lt;h3 id=&quot;installation-2&quot;&gt;Installation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pip install autopep8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;using-2&quot;&gt;Using&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아래의 명령으로 pep8을 적용한 후의 코드의 상태를 출력할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;autopep8 test.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;출력결과.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys


def add(x, y):
    return x + y

print(add(1, 2))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;aggressive 옵션을 추가하면 파일 자체를 pep8을 적용한 상태의 코드로 변경시켜준다.
    &lt;pre&gt;&lt;code&gt;autopep8 --in-place --aggressive --aggressive test.py
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;참고자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pep8&quot;&gt;https://pypi.python.org/pypi/pep8&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://pypi.python.org/pypi/flake8&quot;&gt;https://pypi.python.org/pypi/flake8&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://pypi.python.org/pypi/autopep8&quot;&gt;https://pypi.python.org/pypi/autopep8&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/pep8-%EC%A0%81%EC%9A%A9-flake8,autopep8/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/pep8-%EC%A0%81%EC%9A%A9-flake8,autopep8/</guid>
        
        
      </item>
    
      <item>
        <title>Python Coding Convention PEP8</title>
        <description>&lt;h2 id=&quot;coding-convention&quot;&gt;Coding Convention&lt;/h2&gt;
&lt;p&gt;코딩컨벤션이란 프로그래밍을 할 때 코드를 관리하기 쉽도록 하기 위한 일종의 규약입니다. 예를 들면, 들여쓰기의 칸 수를 정해 놓는다던지, &lt;code&gt;int i = 0;&lt;/code&gt;에서 i, =, 0 사이의 띄어쓰기를 넣느냐 마느냐를 정해놓은 것입니다. 우리가 작성한 코드는 자신 이외에도 다른 많은 사람들이 보게됩니다. 그런데 코드의 규칙이 통일 되어있지 않으면 가독성도 떨어지고 관리하기 힘든 어려움이 있습니다. 그렇기 때문에 코딩컨벤션은 개발에서 고려해야할 중요한 요소 중 하나입니다. Python에서는 PEP 8이 대표적입니다.&lt;/p&gt;

&lt;h2 id=&quot;pep-8&quot;&gt;PEP 8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps&quot;&gt;PEP(Python Enhance Proposal)&lt;/a&gt;이란 파이썬을 개선하기 위한 개선 제안서를 뜻합니다. 그 중에서 PEP 8은 기본 Python 배포판의 라이브러리를 구성하는 Python 코드의 Coding Convention을 설명한다.&lt;/p&gt;

&lt;h2 id=&quot;code-layout&quot;&gt;Code layout&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;들여쓰기는 스페이스 네 칸을 이용한다.&lt;/li&gt;
  &lt;li&gt;한 줄은 최대 79자 까지.&lt;/li&gt;
  &lt;li&gt;최상위 함수와 클래스 선언 사이를 구분 짓기 위해 두 줄을 띄어 쓴다.&lt;/li&gt;
  &lt;li&gt;클래스 내의 메소드들을 나누기 위해 한 줄을 띄어 쓴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whitespace-in-expressions-and-statements&quot;&gt;Whitespace in Expressions and Statements&lt;/h2&gt;

&lt;p&gt;다음과 같은 상황에서는 여분의 공백 문자를 사용하지 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;괄호 내부에 연결되는 부분.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Yes: spam(ham[1], {eggs: 2})
No:  spam( ham[ 1 ], { eggs: 2 } )
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;콤마, 세미콜론, 콜론의 이전 위치&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Yes: if x == 4: print x, y; x, y = y, x
No:  if x == 4 : print x , y ; x , y = y , x
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;괄호의 바로 이전 위치&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Yes: spam(1)
No:  spam (1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Yes: dct['key'] = lst[index]
No:  dct ['key'] = lst [index]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;연산자 주변에 한 개를 초과하는 공백 문자가 있는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Yes:
x = 1
y = 2
long_variable = 3

No:
x             = 1
y             = 2
long_variable = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;코드의 내용과 동떨어진 주석은 아예 없는 편이 낫다.&lt;/li&gt;
  &lt;li&gt;항상 코드의 변경에 맞추어 최신 상태를 유지해야 한다.&lt;/li&gt;
  &lt;li&gt;주석은 완결된 문장 형태로 작성한다. (소문자로 된 식별자를 제외하고는 대문자로 시작한다.)&lt;/li&gt;
  &lt;li&gt;문장의 마침표 다음에는 두 개의 공백을 넣는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;naming-conventions&quot;&gt;Naming Conventions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;i(I), o(O), l(L) 한 글자를 변수 이름으로 사용하지 않는다.&lt;/li&gt;
  &lt;li&gt;클래스 이름은 CapWords 규칙을 이용한다.&lt;/li&gt;
  &lt;li&gt;예외 이름은 클래스이므로 CapWords를 사용하지만 이름 끝에 “Error”라는 접미사를 붙인다.&lt;/li&gt;
  &lt;li&gt;함수 이름은 소문자를 사용하고 ‘_‘로 구분한다.&lt;/li&gt;
  &lt;li&gt;인스턴스 메소드의 첫 번째 인자는 항상 self이다.&lt;/li&gt;
  &lt;li&gt;클래스 메소드의 첫 번째 인자는 항상 cls이다.&lt;/li&gt;
  &lt;li&gt;메소드, 인스턴스 변수는 함수와 같다. public 경우에는 앞에 ‘-‘를 하나 붙인다.&lt;/li&gt;
  &lt;li&gt;서브 클래스의 이름 충돌을 막기 위해 앞에 밑줄 2개를 붙인다.&lt;/li&gt;
  &lt;li&gt;상수는 모듈 단위에서만 정의하며 모두 대문자로 하고 ‘_‘로 구분한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;참고 자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://kenial.tistory.com/902&quot;&gt;http://kenial.tistory.com/902&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://spoqa.github.io/2012/08/03/about-python-coding-convention.html&quot;&gt;https://spoqa.github.io/2012/08/03/about-python-coding-convention.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/pep8/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/pep8/</guid>
        
        
      </item>
    
      <item>
        <title>Travis-ci를 이용하여 python 'Hello world' 작성하기</title>
        <description>&lt;h2 id=&quot;cicontinuous-integration&quot;&gt;CI(Continuous Integration)&lt;/h2&gt;
&lt;p&gt;지속적 통합은 자동화된 빌드 및 테스트가 수행된 후, 개발자가 코드 변경을 중앙 리포지토리에 정기적으로 통합하는 소프트웨어 개발 방식이다. 버그를 신속하게 찾아 해결하고, 소프트웨어 품질을 개선하고, 소프트웨어 업데이트 검증 및 릴리즈하는 데 걸리는 시간을 단축하는 것을 핵심 목표로 하고있다.&lt;/p&gt;

&lt;p&gt;협업에서 개발자가 기존 코드의 복사본을 받아서 작업을 진행할 때, 한편 다른 개발자들 또한 기존의 코드의 복사본을 받아서 작업을 진행하게 된다. 작성을 완료한 코드를 저장소에 제출하려면 먼저 자신이 코드의 복사본을 받았던 시점부터 현재까지의 변경사항을 자신의 코드에 반영하여서 제출하여야 한다. 이때, 저장소의 변경사항이 많을 수록 개발자의 해야 할 일이 많아진다. 작업하는 시간보다 작업 내용을 통합하는데 걸리는 시간이 더 오래걸리는 “통합의 지옥”이라는 상황에 빠지기도 한다. 지속적 통합을 적용한다면 초기에 그리고 자주 통합을 해서 “통합의 지옥”에서 벗어날 수 있다. 또한 재작업 시간을 줄여줘서 비용과 시간을 줄일 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;travis-ci&quot;&gt;Travis CI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;는 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;과 연동해 지속적 통합(CI)을 호스팅해주는 서비스이다. Github 저장소에 새로운 커밋이 push되면 Travis CI 서버가 뒤에서 자동으로 새로운 커밋을 가져와서 빌드, 테스트를 수행하고 그 결과를 알려준다. C, C++, Go, Java, JavaScript, Perl, Python, Ruby 등의 다양한 언어를 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;tddtest-driven-development&quot;&gt;TDD(Test-Driven-Development)&lt;/h2&gt;
&lt;p&gt;테스트 주도 개발. 실제 코드를 작성하기 전에 테스트 코드를 먼저 작성하는 개발 방법론이다. 우선 간단한 테스트 코드를 작성하고 그 테스트를 통과하기 위한 최소한의 코드만 작성한 후 리팩토링한다. 이 과정을 반복하여 순차적으로 프로그램을 개발한다.&lt;/p&gt;

&lt;h2 id=&quot;tdd-with-python&quot;&gt;TDD with python&lt;/h2&gt;
&lt;p&gt;pytest를 이용하여 ‘Hello World’를 작성해보자.&lt;/p&gt;

&lt;p&gt;우선 pytest를 설치한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install -U pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;디렉토리를 하나 생성하고 main.py를 만든다&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir travis_python_hello
$ cd travis_python_hello
$ nano main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;get_helloworld() 메소드를 테스트하기 위한 test_get_helloworld() 메소드를 작성한다.&lt;br /&gt;
&lt;em&gt;(test로 시작하는 메소드는 테스트 코드로 인지한다.)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def test_get_helloworld():
	assert 'hello world' == get_helloworld()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/travis-ci_pytest1.png&quot; alt=&quot;travis-ci_python&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ pytest main.py&lt;/code&gt;으로 테스트를 돌려보면, 아직 get_helloworld() 메소드를 작성하지 않았으므로 ‘get_helloworld()메소드가 정의되지 않았다’는 당연한 결과가 출력된다.&lt;/p&gt;

&lt;p&gt;위의 테스트를 통과하기 위한 최소한의 코드를 작성한 후 테스트한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{.python}&quot;&gt;def get_helloworld():
	print('hello world')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/travis-ci_pytest2.png&quot; alt=&quot;travis-ci_python&quot; /&gt;&lt;/p&gt;

&lt;p&gt;get_helloworld() 메소드의 반환값과 ‘hello world’이 일치하지 않다는 오류가 발생한다. 이를 통과하기 위한 코드로 수정한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def get_helloworld():
	return 'hello world'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트가 통과 됐으니 ‘hello world’를 출력하는 코드를 작성한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{.python}&quot;&gt;def main():
	print(get_helloworld())

if __name__ == '__main__':
	main()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;travis-ci-&quot;&gt;Travis CI 적용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;github에 ‘travis_python_hello’라는 새로운 repository를 생성한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;https://travis-ci.org&lt;/a&gt; 에 접속하여 로그인을 한다.&lt;/li&gt;
  &lt;li&gt;좌측에 My Repositories에 + 버튼을 클릭한 후 &lt;em&gt;[username]&lt;/em&gt;/travis_python_hello에 체크표시를 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/travis-ci_travis3.png&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 로컬 저장소에 .travis.yml파일을 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;language: python
python:
  - &quot;3.5&quot;
# command to install dependencies
install: &quot;pip install -r requirements.txt&quot;
# command to run tests
script: pytest main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;requirements.txt 파일도 추가한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pytest==3.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git 원격 저장소를 지정하고 commit, push 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/_[username]_/travis_python_hello.git
git add .
git commit -m &quot;init travis ci&quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;https://travis-ci.org/&lt;em&gt;[username]&lt;/em&gt;/travis_python_hello 에 접속하여 결과를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/travis-ci/travis-ci_travis2.png&quot; alt=&quot;travis-ci&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;참고자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9&quot;&gt;https://ko.wikipedia.org/wiki/%EC%A7%80%EC%86%8D%EC%A0%81_%ED%86%B5%ED%95%A9&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://aws.amazon.com/ko/devops/continuous-integration/&quot;&gt;https://aws.amazon.com/ko/devops/continuous-integration/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://hatemogi.com/holiday-project-day-17&quot;&gt;http://hatemogi.com/holiday-project-day-17&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/travis-ci/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/travis-ci/</guid>
        
        
      </item>
    
      <item>
        <title>마크다운(Markdown)</title>
        <description>&lt;h2 id=&quot;markdown-&quot;&gt;Markdown 이란?&lt;/h2&gt;
&lt;p&gt;일반 텍스트 문서의 양식을 편집하는 문법으로 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 텍스트에 태그를 이용해서 글자를 굵게하거나, 이미지를 삽입하는 등의 기능을 제공하고, 간결, 다양한 형태로의 변환, 적은 용량 등의 장점이 있다. README 파일이나 온라인 문서 등을 작성하는데 유용하다.&lt;/p&gt;

&lt;h2 id=&quot;markdown--1&quot;&gt;Markdown 문법&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;1. 제목&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;큰 제목
=====
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-1&quot;&gt;큰 제목&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;작은 제목
-------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;작은 제목&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 제목1
## 제목2
### 제목3
#### 제목4
##### 제목5
###### 제목6
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-3&quot;&gt;제목1&lt;/h1&gt;

&lt;h2 id=&quot;section-4&quot;&gt;제목2&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;제목3&lt;/h3&gt;

&lt;h4 id=&quot;section-6&quot;&gt;제목4&lt;/h4&gt;

&lt;h5 id=&quot;section-7&quot;&gt;제목5&lt;/h5&gt;

&lt;h6 id=&quot;section-8&quot;&gt;제목6&lt;/h6&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;2. 강조&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;*기울임* _기울임_
**굵은글씨** __굵은글씨__
~~취소선~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;기울임&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;굵은글씨&lt;/strong&gt;&lt;br /&gt;
&lt;del&gt;취소선&lt;/del&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;3. 개행&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;라인 끝에
스페이스바를  
2개 이상 넣는다.  
(드레그 해서 스페이스바 확인)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;라인 끝에
스페이스바를&lt;br /&gt;
2개 이상 넣는다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;4. 인용문&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;인용문은  
&amp;gt; &quot;&amp;gt;&quot;기호를 오른쪽에 십입한다.   
안에서 다른 **마크다운 요소**를 포함할 수도 있다.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;인용문은&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;”&amp;gt;”기호를 오른쪽에 십입한다.&lt;br /&gt;
안에서 다른 &lt;strong&gt;마크다운 요소&lt;/strong&gt;를 포함할 수도 있다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-12&quot;&gt;5. 글 머리 기호&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;* 글
* 머리
	* 기호
- 글
- 머리
	- 기호
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;글&lt;/li&gt;
  &lt;li&gt;머리
    &lt;ul&gt;
      &lt;li&gt;기호&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;글&lt;/li&gt;
  &lt;li&gt;머리
    &lt;ul&gt;
      &lt;li&gt;기호&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;6. 코드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;`한 줄 코드`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;한 줄 코드&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ```
 여러
 줄
 코드d
 ```
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;여러
줄
코드
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;7. 이미지&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;![대체 텍스트](이미지경로)
![markdown logo](https://lh3.googleusercontent.com/-3PZCHZ3KJKQ/UseeUz_MrZI/AAAAAAABi_c/ZnadAPzyJcg/s200/markdown-mark.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-3PZCHZ3KJKQ/UseeUz_MrZI/AAAAAAABi_c/ZnadAPzyJcg/s200/markdown-mark.png&quot; alt=&quot;markdown logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;8. 링크&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[링크문구](링크주소)
[jihun blog](https://cjh5414.github.io)
&amp;lt;링크주소&amp;gt;
&amp;lt;https://cjh5414.github.io&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://cjh5414.github.io&quot;&gt;jihun blog&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://cjh5414.github.io&quot;&gt;https://cjh5414.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-16&quot;&gt;참고 자료&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.kalkin7.com/2014/02/05/wordpress-markdown-quick-reference-for-koreans/&quot;&gt;https://blog.kalkin7.com/2014/02/05/wordpress-markdown-quick-reference-for-koreans/&lt;/a&gt;
&lt;a href=&quot;https://wikidocs.net/1678&quot;&gt;https://wikidocs.net/1678&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://gist.github.com/ihoneymon/652be052a0727ad59601&quot;&gt;https://gist.github.com/ihoneymon/652be052a0727ad59601&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://sergeswin.com/1013&quot;&gt;https://sergeswin.com/1013&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/markdown/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/markdown/</guid>
        
        
      </item>
    
      <item>
        <title>Github Pages 기능 이용하기</title>
        <description>&lt;h2 id=&quot;github-pages&quot;&gt;Github의 Pages란?&lt;/h2&gt;
&lt;p&gt;Github에서 무료로 호스팅하는 공개 웹페이지이다. 웹 서버를 구축하지 않고도 github의 repository에 index.html 파일을 넣는 것 만으로 간편하게 개인 사이트를 만들 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;github-pages-&quot;&gt;Github Pages 만들기&lt;/h2&gt;

&lt;h3 id=&quot;create-a-repository&quot;&gt;1. Create a Repository&lt;/h3&gt;
&lt;p&gt;github에 로그인을 하고 새로운 repository를 생성한다.&lt;br /&gt;
repository의 이름은 반드시 &lt;em&gt;[username]&lt;/em&gt;.github.io 로 지정해야한다.&lt;br /&gt;
&lt;img src=&quot;/images/githubpages/githubpages_new.png&quot; alt=&quot;New Repository&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;clone-the-repository&quot;&gt;2. Clone the repository&lt;/h3&gt;
&lt;p&gt;terminal을 실행시키고 project를 clone 하고자 하는 폴더로 이동한 후 다음 명령을 실행한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/_[username]_/_[username]_.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-an-indexhtml&quot;&gt;3. Create an index.html&lt;/h3&gt;
&lt;p&gt;clone한 project 폴더로 이동한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd _[username]_.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;개인 사이트에 보여질 index.html을 작성한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &quot;Hello World&quot; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;push&quot;&gt;4. Push&lt;/h3&gt;
&lt;p&gt;작성한 index.html을 commit, push한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add --all  
$ git commit -m &quot;Initialize Github Pages&quot;  
$ git push -u origin master  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;https://&lt;em&gt;[username]&lt;/em&gt;.github.io 주소로 확인한다.&lt;br /&gt;
&lt;img src=&quot;/images/githubpages/githubpages_result.png&quot; alt=&quot;New Repository&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;5. 참고 자료&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com&quot;&gt;https://pages.github.com&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 +0900</pubDate>
        <link>http://nandomoreira.me/2016/Github-Pages-%EA%B8%B0%EB%8A%A5-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
        <guid isPermaLink="true">http://nandomoreira.me/2016/Github-Pages-%EA%B8%B0%EB%8A%A5-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
        
        
      </item>
    
  </channel>
</rss>
